---
import Layout from '../layouts/Layout.astro'
import PhrasesSection from '../components/PhrasesSection.astro'

// Import homepage content directly from JSON file for now
import homepageContent from '../content/homepage/index.json'

const {
  hero,
  googleDeathSection,
  painPointsSection,
  transitionMessageSection,
  bridgeSection,
  servicesPackagesSection,
  statsSection,
  ctaSection
} = homepageContent
---

<Layout title="RedactorSEO - Contenido que posiciona y convierte">
  <!-- Hero Section - Minimalista -->
  <section id="hero" class="relative min-h-screen flex items-center bg-white overflow-hidden">
    <!-- Subtle background elements -->
    <div class="absolute inset-0">
      <div class="absolute top-20 right-20 w-40 h-40 bg-gray-50 rounded-full -z-10"></div>
      <div class="absolute bottom-32 left-16 w-24 h-24 bg-naranja-vibrante/5 rounded-full -z-10"></div>
    </div>

    <div class="relative px-4 sm:px-6 lg:px-12 xl:px-16 w-full">
      <div class="max-w-4xl mx-auto text-center">
        <!-- Subtitle -->
        <div class="mb-8 lg:mb-12 mt-8 lg:mt-16">
          <p class="text-sm font-medium tracking-wide text-gray-500 uppercase">{hero.subtitle}</p>
        </div>

        <!-- Google Memorial Message -->
        <div class="mb-12">
          <div class="max-w-4xl mx-auto text-center">
            <h1 class="font-bold leading-none tracking-tight">
              <span class="block text-4xl sm:text-5xl md:text-7xl lg:text-8xl mb-6 sm:mb-8">
                <span style="color: #4285F4;">G</span><span style="color: #EA4335;">o</span><span style="color: #FBBC04;">o</span><span style="color: #4285F4;">g</span><span style="color: #34A853;">l</span><span style="color: #EA4335;">e</span>
              </span>
              <span class="block text-lg sm:text-xl md:text-2xl lg:text-3xl text-gray-500 font-light tracking-wider mb-6 sm:mb-8">1995-2025</span>
              <span class="block text-5xl sm:text-6xl md:text-8xl lg:text-9xl text-gray-900 font-bold tracking-tighter mb-12 sm:mb-16">D.E.P</span>
            </h1>

          </div>
        </div>


        <!-- Minimalist CTA with memorial theme -->
        <div class="flex justify-center mb-6 sm:mb-8">
          <button
            id="candleButton"
            class="bg-gray-900 border-2 border-gray-900 px-8 py-4 rounded-lg text-white font-medium text-lg hover:bg-gray-800 hover:border-gray-800 transition-all duration-300 cursor-pointer relative group shadow-lg"
          >
            <span id="candleText" class="relative z-10">
              <span>Enciende una vela</span>
            </span>
          </button>
        </div>

        <!-- Counter display -->
        <div class="mb-4 sm:mb-6">
          <p id="candleCounter" class="text-gray-600 text-lg flex items-center justify-center gap-2">
            <span class="candle-emoji">üïØÔ∏è</span> <span id="counterNumber">0</span> almas han rendido homenaje
          </p>
        </div>

        <!-- Message display area -->
        <div id="candleMessage" class="mb-8 opacity-0 transition-all duration-500 transform translate-y-4">
          <div class="bg-gray-100 border border-gray-200 rounded-lg px-6 py-4 max-w-md mx-auto shadow-sm">
            <p id="messageText" class="text-gray-800 font-medium text-center"></p>
          </div>
        </div>

      </div>
    </div>

  </section>

  <!-- Google Death Section -->
  <section class="py-20 md:py-32 lg:py-40 bg-gray-50">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-12 xl:px-16">
      <div class="animate-on-scroll opacity-0 translate-y-8 transition-all duration-700 text-center">
        <h2 class="text-3xl md:text-4xl font-display font-bold text-gray-900 mb-8">
          {googleDeathSection.title}
        </h2>
        <p class="text-xl text-gray-600 mb-12 leading-relaxed max-w-3xl mx-auto">
          {googleDeathSection.paragraph}
        </p>

        <div class="space-y-6 max-w-3xl mx-auto mb-12">
          {googleDeathSection.checkboxItems.map((item, index) => (
            <div class={`animate-on-scroll opacity-0 translate-y-8 transition-all duration-700 delay-${(index + 1) * 100} flex items-start space-x-4 text-left`}>
              <div class="flex-shrink-0 mt-1">
                <div class="w-6 h-6 bg-naranja-vibrante rounded border-2 border-naranja-vibrante flex items-center justify-center">
                  <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                  </svg>
                </div>
              </div>
              <p class="text-lg text-gray-700 leading-relaxed" set:html={item.text.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" class="text-naranja-vibrante hover:text-orange-600 underline">$1</a>')} />
            </div>
          ))}
        </div>

        {/* Nueva frase al final */}
        <div class="animate-on-scroll opacity-0 translate-y-8 transition-all duration-700 delay-300">
          <p class="text-xl text-gray-600 leading-relaxed max-w-3xl mx-auto text-center" style="font-weight: 400;">
            {googleDeathSection.closingPhrase}
          </p>
        </div>
      </div>
    </div>
  </section>

  <!-- Pain Points Section -->
  <section class="py-20 md:py-32 lg:py-40 bg-white">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-12 xl:px-16">
      <div class="animate-on-scroll opacity-0 translate-y-8 transition-all duration-700 text-center">
        <h2 class="text-3xl md:text-4xl font-display font-bold text-gray-900 mb-8">
          {painPointsSection.title}
        </h2>
        <div class="text-xl text-gray-600 mb-12 leading-relaxed max-w-3xl mx-auto">
          <p>{painPointsSection.subtitleFirstPart}</p>
        </div>

        <div class="space-y-8 max-w-3xl mx-auto mb-12">
          {painPointsSection.phrases.map((phrase, index) => (
            <div class={`animate-on-scroll opacity-0 translate-y-8 transition-all duration-700 delay-${(index + 1) * 100} flex items-center justify-center gap-4`}>
              <p class="text-lg text-gray-600 flex-1 text-right">{phrase.leftPart}</p>
              <div class="flex-shrink-0">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="text-naranja-vibrante">
                  <path d="M13 7L18 12L13 17M6 12H18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </div>
              <p class="text-lg text-gray-900 flex-1 text-left font-medium">{phrase.rightPart}</p>
            </div>
          ))}
        </div>

      </div>
    </div>
  </section>

  <!-- Transition Message Section -->
  <section class="py-20 md:py-32 lg:py-40 bg-azul-profundo">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-12 xl:px-16">
      <div class="text-center animate-on-scroll opacity-0 translate-y-8 transition-all duration-700">
        <!-- Quote -->
        <div class="mb-12 animate-on-scroll opacity-0 translate-y-8 transition-all duration-700 delay-200">
          <blockquote class="text-2xl md:text-3xl lg:text-4xl font-bold text-white leading-relaxed">
            {transitionMessageSection.mainText} <span class="text-naranja-vibrante">{transitionMessageSection.highlightedText}</span>
          </blockquote>
          <cite class="text-lg text-white font-medium mt-4 block">
            ‚Äî {transitionMessageSection.continuationText}
          </cite>
        </div>
        <div class="text-lg md:text-xl text-blue-200 leading-relaxed animate-on-scroll opacity-0 translate-y-8 transition-all duration-700 delay-400">
          {transitionMessageSection.secondaryText}
        </div>
      </div>
    </div>
  </section>

  <!-- Bridge Section -->
  <section class="py-20 md:py-32 lg:py-40 bg-gray-50">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-12 xl:px-16">
      <div class="text-center animate-on-scroll opacity-0 translate-y-8 transition-all duration-700">
        <h2 class="text-3xl md:text-4xl font-display font-bold text-gray-900 mb-6">
          {bridgeSection.title}
        </h2>
        <p class="text-xl text-gray-600 leading-relaxed max-w-3xl mx-auto">
          {bridgeSection.paragraph}
        </p>
      </div>
    </div>
  </section>

  <!-- Services Section -->
  <section class="py-20 md:py-32 lg:py-40 bg-white">
    <div class="max-w-5xl mx-auto px-4 sm:px-6 lg:px-12 xl:px-16">

      <!-- Header with Creative Layout -->
      <div class="text-center mb-20 animate-on-scroll opacity-0 translate-y-8 transition-all duration-700">
        <h2 class="text-3xl md:text-4xl font-display font-bold text-gray-900 mb-4">
          {servicesPackagesSection.title}
        </h2>
        <div class="max-w-2xl mx-auto">
          <p class="text-xl text-gray-600 leading-relaxed">
            {servicesPackagesSection.subtitle}
          </p>
        </div>
      </div>

      <!-- Services Flow Layout -->
      <div class="relative">

        <!-- Service Items with Alternating Positioning -->
        <div class="space-y-24 lg:space-y-32">
          {servicesPackagesSection.packages.map((service, index) => {
            const isEven = index % 2 === 1; // Service 2 (index 1) is featured
            const buttonClass = index === 1 ? 'bg-naranja-vibrante hover:bg-orange-600' : 'bg-azul-profundo hover:bg-gray-800';
            const deliverablesList = service.deliverables.join(' ‚Ä¢ ');

            return (
              <div class={`animate-on-scroll opacity-0 translate-y-8 transition-all duration-700 delay-${(index + 1) * 200} lg:grid lg:grid-cols-12 lg:gap-8 lg:items-center`}>

                {/* Mobile: Standard Structure */}
                <div class="lg:hidden mb-8">
                  <h3 class="text-2xl font-display font-bold text-gray-900 mb-4 text-center">
                    {service.heading}
                  </h3>

                  <p class="text-xl text-gray-600 mb-6 leading-relaxed text-center">
                    {service.description}
                  </p>

                  <div class="text-base text-gray-500 mb-8 text-center leading-relaxed">
                    {deliverablesList}
                  </div>

                  <div class="text-center">
                    <a
                      href={service.ctaLink}
                      class={`${buttonClass} text-white px-8 py-4 rounded-lg text-lg font-body font-bold hover:scale-105 transition-all duration-300 inline-block w-full text-center`}
                    >
                      {service.ctaText}
                    </a>
                  </div>
                </div>

                {/* Desktop Layout */}
                {isEven ? (
                  // Featured service (right aligned content, CTA first)
                  <>
                    <div class="hidden lg:block lg:col-span-4 lg:order-1">
                      <a
                        href={service.ctaLink}
                        class={`${buttonClass} text-white px-8 py-4 rounded-lg text-lg font-body font-bold hover:scale-105 transition-all duration-300 inline-block w-full lg:w-auto text-center`}
                      >
                        {service.ctaText}
                      </a>
                    </div>

                    <div class="hidden lg:flex lg:col-span-2 lg:order-2 justify-center">
                      <svg width="32" height="32" viewBox="0 0 24 24" fill="none" class="text-naranja-vibrante transform rotate-180">
                        <path d="M13 7L18 12L13 17M6 12H18" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                      </svg>
                    </div>

                    <div class="hidden lg:block lg:col-span-6 lg:order-3 lg:text-left">
                      <h3 class="text-3xl font-display font-bold text-gray-900 mb-4">
                        {service.heading}
                      </h3>

                      <p class="text-xl text-gray-600 mb-6 leading-relaxed">
                        {service.description}
                      </p>

                      <div class="text-base text-gray-500 mb-8 leading-relaxed">
                        {deliverablesList}
                      </div>
                    </div>
                  </>
                ) : (
                  // Regular services (left aligned content, CTA right)
                  <>
                    <div class="hidden lg:block lg:col-span-6 lg:text-right">
                      <h3 class="text-3xl font-display font-bold text-gray-900 mb-4">
                        {service.heading}
                      </h3>

                      <p class="text-xl text-gray-600 mb-6 leading-relaxed">
                        {service.description}
                      </p>

                      <div class="text-base text-gray-500 mb-8 leading-relaxed">
                        {deliverablesList}
                      </div>
                    </div>

                    <div class="hidden lg:flex lg:col-span-2 justify-center">
                      <svg width="32" height="32" viewBox="0 0 24 24" fill="none" class="text-naranja-vibrante">
                        <path d="M13 7L18 12L13 17M6 12H18" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                      </svg>
                    </div>

                    <div class="hidden lg:block lg:col-span-4">
                      <a
                        href={service.ctaLink}
                        class={`${buttonClass} text-white px-8 py-4 rounded-lg text-lg font-body font-bold hover:scale-105 transition-all duration-300 inline-block w-full lg:w-auto text-center`}
                      >
                        {service.ctaText}
                      </a>
                    </div>
                  </>
                )}
              </div>
            );
          })}
        </div>
      </div>

      <!-- Footer with Creative CTA -->
      <div class="text-center mt-20 animate-on-scroll opacity-0 translate-y-8 transition-all duration-700 delay-600">
        <div class="max-w-lg mx-auto">
          <p class="text-gray-600 mb-6 leading-relaxed">
            {servicesPackagesSection.finalCta.text}
          </p>
          <a
            href={servicesPackagesSection.finalCta.linkUrl}
            class="text-naranja-vibrante hover:text-orange-600 underline font-medium transition-colors duration-300"
          >
            {servicesPackagesSection.finalCta.linkText}
          </a>
        </div>
      </div>

    </div>
  </section>

  <!-- Stats Section -->
  <section class="py-20 md:py-32 lg:py-40 bg-white border-t border-gray-200">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-12 xl:px-16">
      <div class="text-center animate-on-scroll opacity-0 translate-y-8 transition-all duration-700">
        <h2 class="text-3xl md:text-4xl font-display font-bold mb-4 text-black">
          {statsSection.title}
        </h2>
        <p class="text-xl text-gray-600 mb-16 max-w-2xl mx-auto">
          {statsSection.subtitle}
        </p>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-3 gap-8 text-center">
        {statsSection.stats.map((stat, index) => (
          <div class={`animate-on-scroll opacity-0 translate-y-8 transition-all duration-700 delay-${(index + 1) * 100} p-6 hover:scale-105 transition-transform duration-300`}>
            <div class="text-5xl font-display font-bold text-naranja-vibrante mb-2 counter" data-target={stat.value}>0{stat.suffix}</div>
            <div class="text-xl text-gray-600">{stat.description}</div>
          </div>
        ))}
      </div>
    </div>
  </section>





  <!-- CTA Section -->
  <section class="py-20 md:py-32 lg:py-40 bg-black text-white">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-12 xl:px-16 text-center animate-on-scroll opacity-0 translate-y-8 transition-all duration-700">
      <h2 class="text-3xl md:text-4xl font-display font-bold mb-4">
        {ctaSection.title}
      </h2>
      <p class="text-xl text-gray-300 mb-10">
        {ctaSection.description}
      </p>
      <a
        href={ctaSection.buttonLink}
        class="bg-naranja-vibrante text-white px-8 py-4 rounded-lg text-lg font-body font-bold hover:bg-orange-600 hover:scale-105 transition-all duration-300 inline-block"
      >
        {ctaSection.buttonText}
      </a>
    </div>
  </section>
</Layout>

<style>
  @keyframes fade-in-up {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes gradient {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  @keyframes float {
    0%, 100% {
      transform: translateY(0) rotate(0deg);
    }
    25% {
      transform: translateY(-10px) rotate(5deg);
    }
    50% {
      transform: translateY(-15px) rotate(-2deg);
    }
    75% {
      transform: translateY(-5px) rotate(3deg);
    }
  }

  @keyframes glow-pulse {
    0%, 100% {
      opacity: 0.1;
      transform: scale(1);
    }
    50% {
      opacity: 0.15;
      transform: scale(1.05);
    }
  }

  @keyframes flame {
    0%, 100% {
      opacity: 0.8;
      transform: scaleY(1) scaleX(1);
    }
    25% {
      opacity: 0.9;
      transform: scaleY(1.1) scaleX(0.95);
    }
    50% {
      opacity: 1;
      transform: scaleY(0.9) scaleX(1.05);
    }
    75% {
      opacity: 0.85;
      transform: scaleY(1.05) scaleX(0.98);
    }
  }

  @keyframes shake {
    0%, 100% { transform: translateX(0) scale(1); }
    10% { transform: translateX(-3px) scale(1.02); }
    20% { transform: translateX(3px) scale(1.02); }
    30% { transform: translateX(-2px) scale(1.01); }
    40% { transform: translateX(2px) scale(1.01); }
    50% { transform: translateX(-1px) scale(1); }
    60% { transform: translateX(1px) scale(1); }
  }

  @keyframes sparkle {
    0%, 100% {
      opacity: 0;
      transform: scale(0) rotate(0deg);
    }
    50% {
      opacity: 1;
      transform: scale(1) rotate(180deg);
    }
  }

  @keyframes arrow-bounce {
    0%, 100% {
      transform: translateY(0);
      opacity: 0.8;
    }
    50% {
      transform: translateY(8px);
      opacity: 1;
    }
  }

  .animate-fade-in-up {
    animation: fade-in-up 1s ease-out forwards;
    opacity: 0;
  }

  .animate-gradient {
    animation: gradient 3s ease infinite;
    background-size: 300% 300%;
  }

  .animate-float {
    animation: float 6s ease-in-out infinite;
  }

  .animate-glow-pulse {
    animation: glow-pulse 4s ease-in-out infinite;
  }

  .animate-flame {
    animation: flame 1s ease-in-out infinite;
  }

  .animate-shake {
    animation: shake 0.5s ease-in-out;
  }

  .animate-sparkle {
    animation: sparkle 0.6s ease-in-out;
  }

  .animate-arrow-bounce {
    animation: arrow-bounce 2s ease-in-out infinite;
  }

  .bg-300\% {
    background-size: 300% 300%;
  }

  /* Custom text glow for D.E.P */
  .text-glow-orange {
    text-shadow:
      0 0 5px rgba(255, 138, 76, 0.8),
      0 0 10px rgba(255, 138, 76, 0.6),
      0 0 20px rgba(255, 138, 76, 0.4),
      0 0 40px rgba(255, 138, 76, 0.2);
  }

</style>

<script is:inline>
  // Candle messages from content
  const candleMessages = [
    "Por repetir la misma palabra clave 147 veces",
    "Por SEO Yoast",
    "Por el Page Rank",
    "Por Matt Cutts (¬øsigue vivo?)",
    "Por los que estudiaron un M√°ster de SEO",
    "Por los art√≠culos de 'Las 10 mejores'",
    "Por las 'Gu√≠as definitivas'",
    "Por Romuald Fons (¬øsigue vivo?)",
    "Por Google+",
    "Por las agencias SEO que no saben hacer SEO",
    "Por el fin de una era",
    "El SEO ha muerto",
    "Larga vida al SEO",
    "Ahora importa esto:",
    "Estrategia. Creatividad. Contenido.",
    "Resucita tu p√°gina web üëá"
  ];

  // Counter utility functions
  function getRealisticCount() {
    const baseCount = 500;
    const launchDate = new Date('2025-01-01');
    const daysSinceLaunch = Math.floor((Date.now() - launchDate) / (1000 * 60 * 60 * 24));

    // Deterministic daily growth using date as seed
    // Each day gets a consistent "random" growth between 5-25 souls
    let totalGrowth = 0;
    for (let day = 0; day < daysSinceLaunch; day++) {
      const dateForDay = new Date(launchDate);
      dateForDay.setDate(dateForDay.getDate() + day);
      const seed = dateForDay.getTime();
      // Simple deterministic "random" function using date seed
      const pseudoRandom = Math.abs(Math.sin(seed)) * 10000;
      const dailyGrowth = Math.floor((pseudoRandom % 21)) + 5; // 5-25 range with ¬±10 margin
      totalGrowth += dailyGrowth;
    }

    return baseCount + totalGrowth;
  }

  function getCounterWithUserClicks() {
    const realisticCount = getRealisticCount();
    const currentUserClicks = parseInt(localStorage.getItem('userCandleClicks') || '0');
    return realisticCount + currentUserClicks;
  }

  function incrementUserClicks() {
    const currentUserClicks = parseInt(localStorage.getItem('userCandleClicks') || '0');
    const newUserClicks = currentUserClicks + 1;
    localStorage.setItem('userCandleClicks', newUserClicks.toString());
    return newUserClicks;
  }
  // Wait for DOM to be ready
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize counter display with realistic count
    const counterNumber = document.getElementById('counterNumber');
    if (counterNumber) {
      const currentCount = getCounterWithUserClicks();
      counterNumber.textContent = currentCount.toLocaleString('es-ES'); // Format with Spanish thousand separators (points)
    }

    // Ensure the button is clickable
    const candleButton = document.getElementById('candleButton');
    if (candleButton) {
      candleButton.addEventListener('click', lightCandle);
    }
  });

  // Messages for each click - will be loaded from global variable

  function lightCandle() {
    const button = document.getElementById('candleButton');
    const candleEmoji = document.querySelector('.candle-emoji'); // Now in the counter
    const messageDiv = document.getElementById('candleMessage');
    const messageText = document.getElementById('messageText');
    const counterNumber = document.getElementById('counterNumber');

    // Add shake effect to button
    button.classList.add('animate-shake');

    // Increment user clicks first
    incrementUserClicks();
    const userClicks = parseInt(localStorage.getItem('userCandleClicks') || '0');

    // Add temporary glow effect to candle (now in the counter)
    if (userClicks < 3) {
      candleEmoji.style.textShadow = '0 0 20px #ffd700, 0 0 30px #ffa500, 0 0 40px #ff6b35';
      candleEmoji.style.transform = 'scale(1.2)';

      // Remove glow effect after animation
      setTimeout(() => {
        candleEmoji.style.textShadow = '';
        candleEmoji.style.transform = '';
      }, 1000);
    }

    // Create sparkles effect
    createSparkles(button);

    // Get message based on user click count (userClicks is already incremented)
    const messageIndex = userClicks <= candleMessages.length ? userClicks - 1 : candleMessages.length - 1;
    if (candleMessages[messageIndex]) {
      messageText.textContent = candleMessages[messageIndex];
    }

    // Show message with animation
    messageDiv.classList.remove('opacity-0', 'translate-y-4');
    messageDiv.classList.add('opacity-100', 'translate-y-0');

    // Hide message after 8 seconds or until user clicks again
    clearTimeout(window.messageTimeout);
    window.messageTimeout = setTimeout(() => {
      messageDiv.classList.add('opacity-0', 'translate-y-4');
      messageDiv.classList.remove('opacity-100', 'translate-y-0');
    }, 8000);

    // Remove shake effect
    setTimeout(() => {
      button.classList.remove('animate-shake');
    }, 500);

    // Update counter display with new realistic total
    const newTotal = getCounterWithUserClicks();
    counterNumber.textContent = newTotal.toLocaleString('es-ES');
  }

  function createSparkles(element) {
    for (let i = 0; i < 8; i++) {
      const sparkle = document.createElement('div');
      sparkle.innerHTML = '‚ú®';
      sparkle.className = 'absolute text-xl pointer-events-none animate-sparkle';
      sparkle.style.left = Math.random() * 100 + '%';
      sparkle.style.top = Math.random() * 100 + '%';
      sparkle.style.zIndex = '9999';

      element.style.position = 'relative';
      element.appendChild(sparkle);

      setTimeout(() => {
        if (sparkle.parentNode) {
          sparkle.parentNode.removeChild(sparkle);
        }
      }, 600);
    }
  }

  // Intersection Observer para animaciones on scroll - SOLO HOMEPAGE
  (function() {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    }

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.remove('opacity-0', 'translate-y-8')
          entry.target.classList.add('opacity-100', 'translate-y-0')

          // Animar contadores de n√∫meros
          if (entry.target.querySelector('.counter')) {
            const counters = entry.target.querySelectorAll('.counter')
            counters.forEach(counter => {
              const target = parseInt(counter.getAttribute('data-target'))
              const suffix = counter.textContent.includes('%') ? '%' : '+'
              let count = 0
              const increment = target / 60

              const timer = setInterval(() => {
                count += increment
                if (count >= target) {
                  counter.textContent = target + suffix
                  clearInterval(timer)
                } else {
                  counter.textContent = Math.floor(count) + suffix
                }
              }, 30)
            })
          }

          observer.unobserve(entry.target)
        }
      })
    }, observerOptions)

    // Observar todos los elementos con la clase animate-on-scroll
    document.addEventListener('DOMContentLoaded', () => {
      const animatedElements = document.querySelectorAll('.animate-on-scroll')
      animatedElements.forEach(el => observer.observe(el))
    })
  })()
</script>
