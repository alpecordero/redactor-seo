---
import Layout from '../layouts/Layout.astro'
import PhrasesSection from '../components/PhrasesSection.astro'

// Import homepage content directly from JSON file for now
import homepageContent from '../content/homepage/index.json'

const {
  hero,
  googleDeathSection,
  painPointsSection,
  transitionMessageSection,
  bridgeSection,
  statsSection,
  featuredServiceSection,
  testimonialsSection,
  ctaSection
} = homepageContent

const baseUrl = 'https://redactorseo.es'
---

<Layout title={homepageContent.seo.title} description={homepageContent.seo.description}>
  <Fragment slot="head">
    <script type="application/ld+json" set:html={JSON.stringify({
      "@context": "https://schema.org",
      "@graph": [
        {
          "@type": "WebPage",
          "name": homepageContent.seo.title,
          "description": homepageContent.seo.description,
          "url": baseUrl,
          "mainEntity": {
            "@type": "ProfessionalService",
            "name": "Redactor SEO",
            "url": baseUrl
          },
          "breadcrumb": {
            "@type": "BreadcrumbList",
            "itemListElement": [
              {
                "@type": "ListItem",
                "position": 1,
                "name": "Inicio",
                "item": baseUrl
              }
            ]
          }
        },
        ...testimonialsSection.testimonials.map(testimonial => ({
          "@type": "Review",
          "reviewRating": {
            "@type": "Rating",
            "ratingValue": "5",
            "bestRating": "5"
          },
          "author": {
            "@type": "Person",
            "name": testimonial.name
          },
          "reviewBody": testimonial.testimonial,
          "itemReviewed": {
            "@type": "ProfessionalService",
            "@id": `${baseUrl}/#service`
          }
        }))
      ]
    })} />
  </Fragment>
  <section id="hero" class="relative pt-16 pb-8 md:pt-20 md:pb-12 lg:pt-24 lg:pb-16 bg-white overflow-hidden">
    <div class="absolute inset-0">
      <div class="absolute top-20 right-20 w-40 h-40 bg-gray-50 rounded-full -z-10"></div>
      <div class="absolute bottom-32 left-16 w-24 h-24 bg-naranja-vibrante/5 rounded-full -z-10"></div>
    </div>

    <div class="relative px-4 sm:px-6 lg:px-12 xl:px-16 w-full">
      <div class="max-w-4xl mx-auto text-center">
        <div class="mb-6 lg:mb-8 mt-4 lg:mt-8">
          <h1 class="text-sm font-medium tracking-wide text-gray-500 uppercase">{hero.subtitle}</h1>
        </div>

        <div class="mb-8">
          <div class="max-w-4xl mx-auto text-center">
            <p class="font-bold leading-none tracking-tight">
              <span class="block text-6xl sm:text-7xl md:text-8xl lg:text-8xl xl:text-9xl mb-6 sm:mb-8">
                <span style="color: #4285F4;">G</span><span style="color: #EA4335;">o</span><span style="color: #FBBC04;">o</span><span style="color: #4285F4;">g</span><span style="color: #34A853;">l</span><span style="color: #EA4335;">e</span>
              </span>
              <span class="block text-lg sm:text-xl md:text-2xl lg:text-3xl text-gray-500 font-light tracking-wider mb-6 sm:mb-8">1995-2025</span>
              <span class="block text-7xl sm:text-8xl md:text-9xl lg:text-9xl xl:text-[8rem] text-gray-900 font-bold tracking-tighter mb-8 sm:mb-12">D.E.P</span>
            </p>
          </div>
        </div>

        <div class="flex justify-center mb-6 sm:mb-8">
          <button
            id="candleButton"
            class="bg-gray-900 border-2 border-gray-900 px-8 py-4 rounded-lg text-white font-medium text-lg hover:bg-gray-800 hover:border-gray-800 transition-all duration-300 cursor-pointer relative group shadow-lg"
          >
            <span id="candleText" class="relative z-10">
              <span>Enciende una vela</span>
            </span>
          </button>
        </div>

        <div class="mb-4 sm:mb-6">
          <p id="candleCounter" class="text-gray-600 text-lg flex items-center justify-center gap-2">
            <span class="candle-emoji">üïØÔ∏è</span> <span id="counterNumber">0</span> almas han rendido homenaje
          </p>
        </div>

        <div id="candleMessage" class="mb-8 opacity-0 transition-all duration-500 transform translate-y-4">
          <div class="bg-gray-100 border border-gray-200 rounded-lg px-6 py-4 max-w-md mx-auto shadow-sm">
            <p id="messageText" class="text-gray-800 font-medium text-center"></p>
          </div>
        </div>

      </div>
    </div>

  </section>

  <section class="py-20 md:py-32 lg:py-40 bg-gray-50 lazy-load">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-12 xl:px-16">
      <div class="animate-on-scroll opacity-0 translate-y-8 transition-all duration-700 text-center">
        <h2 class="text-3xl md:text-4xl font-display font-bold text-gray-900 mb-8">
          {googleDeathSection.title}
        </h2>
        <p class="text-xl text-gray-600 mb-12 leading-relaxed max-w-3xl mx-auto">
          {googleDeathSection.paragraph}
        </p>

        <div class="space-y-6 max-w-3xl mx-auto mb-12">
          {googleDeathSection.checkboxItems.map((item, index) => (
            <div class={`animate-on-scroll opacity-0 translate-y-8 transition-all duration-700 delay-${(index + 1) * 100} flex items-start space-x-4 text-left`}>
              <div class="flex-shrink-0 mt-1">
                <div class="w-6 h-6 bg-naranja-vibrante rounded border-2 border-naranja-vibrante flex items-center justify-center">
                  <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                  </svg>
                </div>
              </div>
              <p class="text-lg text-gray-700 leading-relaxed" set:html={item.text.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" class="text-naranja-vibrante hover:text-orange-600 underline">$1</a>')} />
            </div>
          ))}
        </div>

        {/* Nueva frase al final */}
        <div class="animate-on-scroll opacity-0 translate-y-8 transition-all duration-700 delay-300">
          <p class="text-xl text-gray-600 leading-relaxed max-w-3xl mx-auto text-center" style="font-weight: 400;" set:html={googleDeathSection.closingPhrase}>
          </p>
        </div>
      </div>
    </div>
  </section>

  <section class="py-20 md:py-32 lg:py-40 bg-white">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-12 xl:px-16">
      <div class="animate-on-scroll opacity-0 translate-y-8 transition-all duration-700 text-center">
        <h2 class="text-3xl md:text-4xl font-display font-bold text-gray-900 mb-8">
          {painPointsSection.title}
        </h2>
        <div class="text-xl text-gray-600 mb-12 leading-relaxed max-w-3xl mx-auto">
          <p>{painPointsSection.subtitleFirstPart}</p>
        </div>

        <div class="space-y-8 max-w-3xl mx-auto mb-12">
          {painPointsSection.phrases.map((phrase, index) => (
            <div class={`animate-on-scroll opacity-0 translate-y-8 transition-all duration-700 delay-${(index + 1) * 100} flex items-center justify-center gap-4`}>
              <p class="text-lg text-gray-600 flex-1 text-right">{phrase.leftPart}</p>
              <div class="flex-shrink-0">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="text-naranja-vibrante">
                  <path d="M13 7L18 12L13 17M6 12H18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
              </div>
              <p class="text-lg text-gray-900 flex-1 text-left font-medium">{phrase.rightPart}</p>
            </div>
          ))}
        </div>

        {painPointsSection.aiStatistic && (
          <div class="text-xl text-gray-600 mb-8 max-w-3xl mx-auto leading-relaxed">
            <p set:html={painPointsSection.aiStatistic.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" class="text-naranja-vibrante hover:text-orange-600 underline">$1</a>')} />
          </div>
        )}

      </div>
    </div>
  </section>

  <section class="py-20 md:py-32 lg:py-40 bg-azul-profundo">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-12 xl:px-16">
      <div class="text-center animate-on-scroll opacity-0 translate-y-8 transition-all duration-700">
        <div class="animate-on-scroll opacity-0 translate-y-8 transition-all duration-700 delay-200">
          <blockquote class="text-2xl md:text-3xl lg:text-4xl font-bold text-white leading-relaxed">
            {transitionMessageSection.mainText} <span class="text-naranja-vibrante">{transitionMessageSection.highlightedText}</span>
          </blockquote>
          <cite class="text-lg text-white font-medium mt-4 block">
            ‚Äî {transitionMessageSection.continuationText}
          </cite>
        </div>
      </div>
    </div>
  </section>

  <section class="py-20 md:py-32 lg:py-40 bg-gray-50">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-12 xl:px-16">
      <div class="text-center animate-on-scroll opacity-0 translate-y-8 transition-all duration-700">
        <h2 class="text-3xl md:text-4xl font-display font-bold text-gray-900 mb-6">
          {bridgeSection.title}
        </h2>
        <p class="text-xl text-gray-600 leading-relaxed max-w-3xl mx-auto mb-8" set:html={bridgeSection.paragraph.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" class="text-naranja-vibrante hover:text-orange-600 underline font-medium transition-colors duration-300">$1</a>')}>
        </p>
        {bridgeSection.secondaryParagraph && (
          <p class="text-xl text-gray-600 leading-relaxed max-w-3xl mx-auto mb-8" set:html={bridgeSection.secondaryParagraph.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" class="text-naranja-vibrante hover:text-orange-600 underline font-medium transition-colors duration-300">$1</a>').replace(/500\.000‚Ç¨ anuales/g, '<strong>500.000‚Ç¨ anuales</strong>')}>
          </p>
        )}
        {bridgeSection.tertiaryParagraph && (
          <p class="text-xl text-gray-600 leading-relaxed max-w-3xl mx-auto mb-8" set:html={bridgeSection.tertiaryParagraph.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" class="text-naranja-vibrante hover:text-orange-600 underline font-medium transition-colors duration-300">$1</a>')}>
          </p>
        )}
        {bridgeSection.closingParagraph && (
          <p class="text-xl text-gray-600 leading-relaxed max-w-3xl mx-auto" set:html={bridgeSection.closingParagraph.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" class="text-naranja-vibrante hover:text-orange-600 underline font-medium transition-colors duration-300">$1</a>').replace(/claridad y dos activos/g, '<strong>claridad y dos activos</strong>')}>
          </p>
        )}
      </div>
    </div>
  </section>

  <section class="py-20 md:py-32 lg:py-40 bg-white">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-12 xl:px-16">
      <div class="text-center mb-12">
        <h2 class="text-3xl md:text-4xl font-display font-bold text-gray-900 mb-4">
          {featuredServiceSection.title}
        </h2>
        <p class="text-xl text-gray-600 mb-8">
          {featuredServiceSection.subtitle}
        </p>

        <div class="flex justify-center mt-12 mb-16">
          <div class="inline-flex flex-col gap-6">
            <div class="flex items-center gap-4">
              <div class="w-8 h-8 rounded-full bg-gray-800 flex items-center justify-center flex-shrink-0">
                <span class="text-white font-bold text-sm">1</span>
              </div>
              <span class="text-gray-700 font-medium text-lg">{featuredServiceSection.benefit1}</span>
            </div>
            <div class="flex items-center gap-4">
              <div class="w-8 h-8 rounded-full bg-gray-800 flex items-center justify-center flex-shrink-0">
                <span class="text-white font-bold text-sm">2</span>
              </div>
              <span class="text-gray-700 font-medium text-lg">{featuredServiceSection.benefit2}</span>
            </div>
          </div>
        </div>
      </div>

      <div class="max-w-2xl mx-auto">
        <div class="border-2 border-gray-200 rounded-2xl p-8 bg-white hover:border-naranja-vibrante transition-all duration-300 hover:shadow-xl relative pt-10">
          <div class="absolute -top-3 left-1/2 transform -translate-x-1/2">
            <span class="inline-block bg-gray-200 text-gray-700 text-xs font-medium px-3 py-1 rounded-full border border-gray-300">
              {featuredServiceSection.packLabel}
            </span>
          </div>

          <div class="text-center mb-8 pb-6 border-b-2 border-dashed border-gray-300">
            <h3 class="text-2xl font-bold text-gray-900">
              {featuredServiceSection.packTitle}
            </h3>
          </div>

          {featuredServiceSection.features && featuredServiceSection.features.length > 0 && (
            <div class="mb-8 flex justify-center">
              <div class="space-y-2 inline-block">
                {featuredServiceSection.features.map((feature) => (
                  <div class="flex items-center gap-2">
                    <svg class="w-4 h-4 text-naranja-vibrante flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                    <span class="text-sm text-gray-700">{feature}</span>
                  </div>
                ))}
              </div>
            </div>
          )}

          <div class="mb-8">
            <div class="max-w-sm mx-auto border-2 border-gray-300 rounded-lg p-6 bg-gray-50">
              <div class="space-y-3">
                <div class="flex justify-between items-center">
                  <span class="text-gray-900 font-bold">PRECIO:</span>
                  <span class="text-3xl font-bold text-azul-profundo">{featuredServiceSection.currentPrice}</span>
                </div>
                <div class="flex justify-between items-center">
                  <span class="text-gray-600 font-medium">VALOR:</span>
                  <span class="text-gray-500 line-through text-3xl">{featuredServiceSection.originalPrice}</span>
                </div>
                <div class="border-t-2 border-gray-300 my-3"></div>
                <div class="flex justify-between items-center">
                  <span class="text-naranja-vibrante font-medium">AHORRAS:</span>
                  <span class="text-2xl font-medium text-naranja-vibrante">{featuredServiceSection.savings}</span>
                </div>
              </div>
            </div>
          </div>

          <div class="text-center">
            <a
              href={featuredServiceSection.ctaLink}
              class="inline-block bg-naranja-vibrante text-white px-10 py-4 rounded-xl text-lg font-bold hover:bg-naranja-vibrante-hover hover:scale-105 transition-all duration-300 shadow-lg uppercase tracking-wide"
            >
              {featuredServiceSection.ctaText}
            </a>
          </div>
        </div>

        {featuredServiceSection.alternativeLinks && featuredServiceSection.alternativeLinks.length > 0 && (
          <div class="mt-12">
            <div class="text-center">
              <p class="text-gray-600 text-base mb-3">{featuredServiceSection.alternativeServicesText}</p>
              <p class="text-base">
                {featuredServiceSection.alternativeLinks.map((link, index) => (
                  <>
                    <a href={link.url} class="text-naranja-vibrante hover:text-orange-600 underline font-medium transition-colors duration-300">{link.text}</a>
                    {index < featuredServiceSection.alternativeLinks.length - 1 && <span> ¬∑ </span>}
                  </>
                ))}
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  </section>

  <section class="py-20 md:py-32 lg:py-40 bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-12 xl:px-16">
      <div class="text-center animate-on-scroll opacity-0 translate-y-8 transition-all duration-700 mb-16">
        <h2 class="text-3xl md:text-4xl font-display font-bold mb-4 text-black">
          {testimonialsSection.title}
        </h2>
        <p class="text-xl text-gray-600 max-w-2xl mx-auto">
          {testimonialsSection.subtitle}
        </p>
      </div>

      <div class="max-w-4xl mx-auto space-y-12">
        {testimonialsSection.testimonials.map((testimonial, index) => (
          <div class={`animate-on-scroll opacity-0 translate-y-8 transition-all duration-700 delay-${(index + 1) * 100} bg-white rounded-lg p-8 hover:shadow-md transition-shadow duration-300`}>
            <div class="flex flex-col md:flex-row md:items-center gap-6">
              <div class="flex items-center md:flex-col md:items-center md:text-center flex-shrink-0 md:w-56">
                <img
                  src={testimonial.image}
                  alt={`${testimonial.name} - ${testimonial.company}`}
                  class="w-20 h-20 md:w-24 md:h-24 rounded-full object-cover mr-4 md:mr-0 md:mb-4"
                  loading="lazy"
                  width="96"
                  height="96"
                />
                <div class="md:text-center">
                  <h3 class="font-bold text-black text-lg md:text-xl">{testimonial.name}</h3>
                  {testimonial.link ? (
                    <a
                      href={testimonial.link}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="text-naranja-vibrante text-sm md:text-base font-medium hover:underline transition-colors"
                    >
                      {testimonial.company}
                    </a>
                  ) : (
                    <p class="text-gray-600 text-sm md:text-base font-medium">{testimonial.company}</p>
                  )}
                </div>
              </div>
              <div class="flex-1">
                <p class="text-gray-700 leading-relaxed text-lg">
                  {testimonial.testimonial}
                </p>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </section>

  <section class="py-20 md:py-32 lg:py-40 bg-white">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-12 xl:px-16">
      <div class="text-center animate-on-scroll opacity-0 translate-y-8 transition-all duration-700">
        <h2 class="text-3xl md:text-4xl font-display font-bold mb-4 text-black">
          {statsSection.title}
        </h2>
        <p class="text-xl text-gray-600 mb-16 max-w-2xl mx-auto">
          {statsSection.subtitle}
        </p>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-3 gap-8 text-center">
        {statsSection.stats.map((stat, index) => (
          <div class={`animate-on-scroll opacity-0 translate-y-8 transition-all duration-700 delay-${(index + 1) * 100} p-6 hover:scale-105 transition-transform duration-300`}>
            <div class="text-5xl font-display font-bold text-naranja-vibrante mb-2 counter" data-target={stat.value}>0{stat.suffix}</div>
            <div class="text-xl text-gray-600">{stat.description}</div>
          </div>
        ))}
      </div>
    </div>
  </section>

  <section class="py-20 md:py-32 lg:py-40 bg-black text-white">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-12 xl:px-16 text-center animate-on-scroll opacity-0 translate-y-8 transition-all duration-700">
      <h2 class="text-3xl md:text-4xl font-display font-bold mb-4">
        {ctaSection.title}
      </h2>
      <p class="text-xl text-gray-300 mb-10">
        {ctaSection.description}
      </p>
      <a
        href={ctaSection.buttonLink}
        class="bg-naranja-vibrante text-white px-8 py-4 rounded-lg text-lg font-body font-bold hover:bg-naranja-vibrante-hover hover:scale-105 transition-all duration-300 inline-block"
      >
        {ctaSection.buttonText}
      </a>
    </div>
  </section>
</Layout>

<style>
  @keyframes fade-in-up {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes gradient {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  @keyframes float {
    0%, 100% {
      transform: translateY(0) rotate(0deg);
    }
    25% {
      transform: translateY(-10px) rotate(5deg);
    }
    50% {
      transform: translateY(-15px) rotate(-2deg);
    }
    75% {
      transform: translateY(-5px) rotate(3deg);
    }
  }

  @keyframes glow-pulse {
    0%, 100% {
      opacity: 0.1;
      transform: scale(1);
    }
    50% {
      opacity: 0.15;
      transform: scale(1.05);
    }
  }

  @keyframes flame {
    0%, 100% {
      opacity: 0.8;
      transform: scaleY(1) scaleX(1);
    }
    25% {
      opacity: 0.9;
      transform: scaleY(1.1) scaleX(0.95);
    }
    50% {
      opacity: 1;
      transform: scaleY(0.9) scaleX(1.05);
    }
    75% {
      opacity: 0.85;
      transform: scaleY(1.05) scaleX(0.98);
    }
  }

  @keyframes shake {
    0%, 100% { transform: translateX(0) scale(1); }
    10% { transform: translateX(-3px) scale(1.02); }
    20% { transform: translateX(3px) scale(1.02); }
    30% { transform: translateX(-2px) scale(1.01); }
    40% { transform: translateX(2px) scale(1.01); }
    50% { transform: translateX(-1px) scale(1); }
    60% { transform: translateX(1px) scale(1); }
  }

  @keyframes sparkle {
    0%, 100% {
      opacity: 0;
      transform: scale(0) rotate(0deg);
    }
    50% {
      opacity: 1;
      transform: scale(1) rotate(180deg);
    }
  }

  @keyframes arrow-bounce {
    0%, 100% {
      transform: translateY(0);
      opacity: 0.8;
    }
    50% {
      transform: translateY(8px);
      opacity: 1;
    }
  }

  .animate-fade-in-up {
    animation: fade-in-up 1s ease-out forwards;
    opacity: 0;
  }

  .animate-gradient {
    animation: gradient 3s ease infinite;
    background-size: 300% 300%;
  }

  .animate-float {
    animation: float 6s ease-in-out infinite;
  }

  .animate-glow-pulse {
    animation: glow-pulse 4s ease-in-out infinite;
  }

  .animate-flame {
    animation: flame 1s ease-in-out infinite;
  }

  .animate-shake {
    animation: shake 0.5s ease-in-out;
  }

  .animate-sparkle {
    animation: sparkle 0.6s ease-in-out;
  }

  .animate-arrow-bounce {
    animation: arrow-bounce 2s ease-in-out infinite;
  }

  .bg-300\% {
    background-size: 300% 300%;
  }

  /* Custom text glow for D.E.P */
  .text-glow-orange {
    text-shadow:
      0 0 5px rgba(255, 138, 76, 0.8),
      0 0 10px rgba(255, 138, 76, 0.6),
      0 0 20px rgba(255, 138, 76, 0.4),
      0 0 40px rgba(255, 138, 76, 0.2);
  }

</style>

<script define:vars={{ candleMessages: hero.candleMessages }}>
  const COUNTER_API = 'https://redactor-seo-counter.dawn-smoke-fbd0.workers.dev';
  let sessionId = sessionStorage.getItem('cs_sid') || null;

  async function getCurrentCount() {
    try {
      const url = sessionId ? `${COUNTER_API}?sid=${sessionId}` : COUNTER_API;
      const headers = sessionId ? { 'X-Session-ID': sessionId } : {};

      const response = await fetch(url, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json', ...headers }
      });

      if (!response.ok) throw new Error('Network error');
      const data = await response.json();

      if (data.sessionId && !sessionId) {
        sessionId = data.sessionId;
        sessionStorage.setItem('cs_sid', sessionId);
      }

      return data.count || 850;
    } catch (error) {
      return getFallbackCount();
    }
  }

  async function incrementCount() {
    try {
      if (!sessionId) await getCurrentCount();

      const response = await fetch(`${COUNTER_API}/increment`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Session-ID': sessionId
        }
      });

      if (!response.ok) {
        if (response.status === 429) throw new Error('RATE_LIMITED');
        throw new Error('Network error');
      }

      const data = await response.json();
      return data.success ? data.count : null;
    } catch (error) {
      if (error.message === 'RATE_LIMITED') throw error;
      return null;
    }
  }

  function getFallbackCount() {
    const t = Date.now();
    const d = new Date();
    const s1 = Math.abs(Math.sin(t / 1000000) * 9999);
    const s2 = d.getDate() * 31 + d.getMonth() * 17;
    const s3 = Math.cos(d.getHours() * 0.261) * 47;
    return Math.floor(1100 + (s1 % 200) + (s2 % 150) + s3);
  }

  function initCounter() {
    const counterNumber = document.getElementById('counterNumber');

    if (counterNumber) {
      const fallbackCount = getFallbackCount();
      counterNumber.textContent = fallbackCount.toLocaleString('es-ES');

      const loadRealCount = () => {
        if ('IntersectionObserver' in window) {
          const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                getCurrentCount().then(currentCount => {
                  counterNumber.textContent = currentCount.toLocaleString('es-ES');
                }).catch(() => {});
                observer.disconnect();
              }
            });
          }, { rootMargin: '50px' });

          observer.observe(counterNumber);
        } else {
          getCurrentCount().then(currentCount => {
            counterNumber.textContent = currentCount.toLocaleString('es-ES');
          }).catch(() => {});
        }
      };

      if (document.readyState === 'complete') {
        if ('requestIdleCallback' in window) {
          requestIdleCallback(loadRealCount, { timeout: 3000 });
        } else {
          setTimeout(loadRealCount, 500);
        }
      } else {
        window.addEventListener('load', () => {
          if ('requestIdleCallback' in window) {
            requestIdleCallback(loadRealCount, { timeout: 3000 });
          } else {
            setTimeout(loadRealCount, 500);
          }
        });
      }
    }

    const candleButton = document.getElementById('candleButton');
    if (candleButton) {
      candleButton.addEventListener('click', lightCandle);
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCounter);
  } else {
    initCounter();
  }

  async function lightCandle() {
    const button = document.getElementById('candleButton');
    const candleEmoji = document.querySelector('.candle-emoji');
    const messageDiv = document.getElementById('candleMessage');
    const messageText = document.getElementById('messageText');
    const counterNumber = document.getElementById('counterNumber');

    button.classList.add('animate-shake');

    let newCount = null;
    try {
      newCount = await incrementCount();
    } catch (error) {
      if (error.message === 'RATE_LIMITED') {
        messageText.textContent = "¬°Espera un momento entre cada homenaje! üïØÔ∏è";
        messageDiv.classList.remove('opacity-0', 'translate-y-4');
        messageDiv.classList.add('opacity-100', 'translate-y-0');
        setTimeout(() => {
          messageDiv.classList.add('opacity-0', 'translate-y-4');
          messageDiv.classList.remove('opacity-100', 'translate-y-0');
        }, 2000);
        button.classList.remove('animate-shake');
        return;
      }
    }

    const userClicks = parseInt(sessionStorage.getItem('user_clicks') || '0') + 1;

    if (userClicks < 3) {
      candleEmoji.style.textShadow = '0 0 20px #ffd700, 0 0 30px #ffa500, 0 0 40px #ff6b35';
      candleEmoji.style.transform = 'scale(1.2)';

      setTimeout(() => {
        candleEmoji.style.textShadow = '';
        candleEmoji.style.transform = '';
      }, 1000);
    }

    createSparkles(button);

    const messageIndex = userClicks <= candleMessages.length ? userClicks - 1 : candleMessages.length - 1;
    if (candleMessages[messageIndex]) {
      messageText.textContent = candleMessages[messageIndex];
    }

    messageDiv.classList.remove('opacity-0', 'translate-y-4');
    messageDiv.classList.add('opacity-100', 'translate-y-0');

    clearTimeout(window.messageTimeout);
    window.messageTimeout = setTimeout(() => {
      messageDiv.classList.add('opacity-0', 'translate-y-4');
      messageDiv.classList.remove('opacity-100', 'translate-y-0');
    }, 8000);

    setTimeout(() => {
      button.classList.remove('animate-shake');
    }, 500);

    if (newCount && counterNumber) {
      counterNumber.textContent = newCount.toLocaleString('es-ES');
    } else if (counterNumber) {
      const currentCount = parseInt(counterNumber.textContent.replace(/\./g, '')) || 1100;
      const newLocalCount = currentCount + 1;
      counterNumber.textContent = newLocalCount.toLocaleString('es-ES');
    }

    sessionStorage.setItem('user_clicks', userClicks.toString());
  }

  function createSparkles(element) {
    for (let i = 0; i < 8; i++) {
      const sparkle = document.createElement('div');
      sparkle.innerHTML = '‚ú®';
      sparkle.className = 'absolute text-xl pointer-events-none animate-sparkle';
      sparkle.style.left = Math.random() * 100 + '%';
      sparkle.style.top = Math.random() * 100 + '%';
      sparkle.style.zIndex = '9999';

      element.style.position = 'relative';
      element.appendChild(sparkle);

      setTimeout(() => {
        if (sparkle.parentNode) {
          sparkle.parentNode.removeChild(sparkle);
        }
      }, 600);
    }
  }

  (function() {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    }

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.remove('opacity-0', 'translate-y-8')
          entry.target.classList.add('opacity-100', 'translate-y-0')

          if (entry.target.querySelector('.counter')) {
            const counters = entry.target.querySelectorAll('.counter')
            counters.forEach(counter => {
              const target = parseInt(counter.getAttribute('data-target'))
              const suffix = counter.textContent.includes('%') ? '%' : '+'
              let count = 0
              const increment = target / 60

              const timer = setInterval(() => {
                count += increment
                if (count >= target) {
                  counter.textContent = target + suffix
                  clearInterval(timer)
                } else {
                  counter.textContent = Math.floor(count) + suffix
                }
              }, 30)
            })
          }

          observer.unobserve(entry.target)
        }
      })
    }, observerOptions)

    document.addEventListener('DOMContentLoaded', () => {
      const animatedElements = document.querySelectorAll('.animate-on-scroll')
      animatedElements.forEach(el => observer.observe(el))
    })
  })()
</script>
