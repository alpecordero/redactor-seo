---
import Layout from '../layouts/Layout.astro'
import PhrasesSection from '../components/PhrasesSection.astro'
import PowerfulMessage from '../components/PowerfulMessage.astro'
import ComparisonSection from '../components/ComparisonSection.astro'
import ContentSection from '../components/ContentSection.astro'

// Import homepage content directly from JSON file for now
import homepageContent from '../content/homepage/index.json'

const {
  hero,
  contentSection,
  statsSection,
  servicesSection,
  comparisonSection,
  powerfulMessage,
  ctaSection
} = homepageContent
---

<Layout title="RedactorSEO - Contenido que posiciona y convierte">
  <!-- Hero Section -->
  <section id="hero" class="relative min-h-screen flex items-center bg-gradient-to-br from-slate-900 via-gray-800 to-blue-900 text-white overflow-hidden">
    <!-- Background Effects -->
    <div class="absolute inset-0">
      <!-- Animated grid pattern -->
      <div class="absolute inset-0 opacity-5" style="background-image: repeating-linear-gradient(90deg, transparent, transparent 98px, rgba(255,255,255,0.03) 100px), repeating-linear-gradient(0deg, transparent, transparent 98px, rgba(255,255,255,0.03) 100px);"></div>
    </div>

    <div class="relative px-4 sm:px-6 lg:px-8 w-full">
      <div class="max-w-6xl mx-auto text-center">
        <!-- Subtitle with orange accent -->
        <div class="mb-8 lg:mb-12 mt-8 lg:mt-16 flex items-center justify-center space-x-3">
          <div class="h-px bg-gradient-to-r from-transparent via-naranja-vibrante to-transparent flex-1 max-w-24"></div>
          <p class="text-sm opacity-75 font-medium tracking-wide text-gray-400">{hero.subtitle}</p>
          <div class="h-px bg-gradient-to-r from-transparent via-naranja-vibrante to-transparent flex-1 max-w-24"></div>
        </div>

        <!-- Main title with special styling for the humorous message -->
        <div class="mb-12">
          <h1 class="font-bold leading-none tracking-tight">
            <span class="block text-6xl md:text-8xl lg:text-9xl mb-8">
              <span style="color: #4285F4;">G</span><span style="color: #EA4335;">o</span><span style="color: #FBBC04;">o</span><span style="color: #4285F4;">g</span><span style="color: #34A853;">l</span><span style="color: #EA4335;">e</span>
            </span>
            <span class="block text-4xl md:text-5xl lg:text-6xl text-gray-400 font-light tracking-wider mb-8">1995-2025</span>
            <span class="block text-7xl md:text-9xl lg:text-[10rem] text-white font-bold tracking-tighter drop-shadow-2xl">D.E.P</span>
          </h1>
        </div>

        <!-- Description with enhanced styling -->
        <div class="mb-16 max-w-2xl mx-auto">
          <p class="text-lg md:text-xl lg:text-2xl leading-relaxed font-light">
            <span class="text-gray-400">{hero.description.slice(0, -1)}</span>
            <span class="text-naranja-vibrante font-medium">.</span>
          </p>
        </div>

        <!-- Enhanced CTA with memorial theme -->
        <div class="flex justify-center mb-16">
          <button
            id="candleButton"
            class="bg-white/10 backdrop-blur-sm border-2 border-white/30 px-8 py-4 rounded-lg text-white font-medium text-lg hover:bg-white/20 hover:border-white/50 transition-all duration-300 cursor-pointer relative group"
          >
            <span id="candleText" class="relative z-10 flex items-center gap-2">
              <span class="candle-emoji">üïØÔ∏è</span>
              <span>Enciende una vela</span>
            </span>
            <!-- Subtle glow effect on hover -->
            <div class="absolute inset-0 bg-white/5 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
          </button>
        </div>

        <!-- Message display area -->
        <div id="candleMessage" class="mb-8 opacity-0 transition-all duration-500 transform translate-y-4">
          <div class="bg-black/50 backdrop-blur-sm border border-naranja-vibrante/30 rounded-lg px-6 py-4 max-w-md mx-auto">
            <p id="messageText" class="text-white font-medium text-center"></p>
          </div>
        </div>

        <!-- Animated scroll indicator -->
        <div class="flex justify-center mt-8 lg:mt-16 mb-8 lg:mb-16">
          <button
            onclick="document.querySelector('.phrases-section, [class*=PhrasesSection]').scrollIntoView({behavior: 'smooth'})"
            class="group flex flex-col items-center text-gray-400 hover:text-naranja-vibrante transition-all duration-300"
            aria-label="Ir a la siguiente secci√≥n"
          >
            <span class="text-sm mb-4 opacity-75 font-medium tracking-wide">Si te sientes preparado para avanzar, avanza</span>
            <div class="animate-arrow-bounce">
              <svg class="w-8 h-8 text-naranja-vibrante" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 2L12 20M12 20L6 14M12 20L18 14" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
          </button>
        </div>
      </div>
    </div>

    <!-- Floating elements for extra impact -->
    <div class="absolute top-20 left-10 animate-float">
      <div class="text-6xl opacity-20">üíÄ</div>
    </div>
    <div class="absolute top-32 right-16 animate-float delay-1000">
      <div class="text-4xl opacity-20">ü™¶</div>
    </div>
    <div class="absolute bottom-32 left-20 animate-float delay-2000">
      <div class="text-5xl opacity-20">‚ö∞Ô∏è</div>
    </div>
  </section>

  <!-- Content Section -->
  <ContentSection
    title={contentSection.title}
    firstParagraph={contentSection.firstParagraph}
    bulletPoints={contentSection.bulletPoints}
    secondParagraph={contentSection.secondParagraph}
    arrowPoints={contentSection.arrowPoints}
  />

  <!-- Stats Section -->
  <section class="py-20 bg-white border-t border-gray-200">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center animate-on-scroll opacity-0 translate-y-8 transition-all duration-700">
        <h2 class="text-3xl md:text-4xl font-display font-bold mb-4 text-black">
          {statsSection.title}
        </h2>
        <p class="text-xl text-gray-600 mb-16 max-w-2xl mx-auto">
          {statsSection.subtitle}
        </p>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-3 gap-8 text-center">
        {statsSection.stats.map((stat, index) => (
          <div class={`animate-on-scroll opacity-0 translate-y-8 transition-all duration-700 delay-${(index + 1) * 100} p-6 hover:scale-105 transition-transform duration-300`}>
            <div class="text-5xl font-display font-bold text-naranja-vibrante mb-2 counter" data-target={stat.value}>0{stat.suffix}</div>
            <div class="text-xl text-gray-600">{stat.description}</div>
          </div>
        ))}
      </div>
    </div>
  </section>

  <!-- Services Preview -->
  <section id="services" class="py-20 bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center animate-on-scroll opacity-0 translate-y-8 transition-all duration-700">
        <h2 class="text-3xl md:text-4xl font-display font-bold text-gray-900">
          {servicesSection.title}
        </h2>
        <p class="mt-4 text-xl text-gray-600 max-w-2xl mx-auto">
          {servicesSection.subtitle}
        </p>
      </div>

      <div class="mt-16 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {servicesSection.services.map((service, index) => (
          <div class={`animate-on-scroll opacity-0 translate-y-8 transition-all duration-700 delay-${(index + 1) * 100} bg-white p-6 rounded-lg border border-gray-200 hover:border-naranja-vibrante hover:shadow-lg hover:-translate-y-1 transition-all duration-300`}>
            <div class="w-12 h-12 bg-orange-50 rounded-lg flex items-center justify-center mb-4">
              <svg class="w-6 h-6 text-naranja-vibrante" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={service.icon}></path>
              </svg>
            </div>
            <h3 class="text-xl font-semibold text-black mb-2">{service.title}</h3>
            <p class="text-gray-600">
              {service.description}
            </p>
          </div>
        ))}
      </div>

      <div class="text-center mt-12 animate-on-scroll opacity-0 translate-y-8 transition-all duration-700 delay-500">
        <a
          href={servicesSection.ctaLink}
          class="inline-flex items-center bg-naranja-vibrante text-white px-6 py-3 rounded-lg font-body font-bold hover:bg-orange-600 hover:scale-105 transition-all duration-300"
        >
          {servicesSection.ctaText}
          <svg class="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
        </a>
      </div>
    </div>
  </section>

  <!-- Comparison Section -->
  <ComparisonSection
    title={comparisonSection.title}
    subtitle={comparisonSection.subtitle}
    leftColumn={comparisonSection.leftColumn}
    rightColumn={comparisonSection.rightColumn}
  />

  <!-- Powerful Message Section -->
  <PowerfulMessage
    mainMessage={powerfulMessage.mainMessage}
    highlightedWords={powerfulMessage.highlightedWords}
    secondaryMessage={powerfulMessage.secondaryMessage}
  />

  <!-- CTA Section -->
  <section class="py-20 bg-black text-white">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center animate-on-scroll opacity-0 translate-y-8 transition-all duration-700">
      <h2 class="text-3xl md:text-4xl font-display font-bold mb-4">
        {ctaSection.title}
      </h2>
      <p class="text-xl text-gray-300 mb-10">
        {ctaSection.description}
      </p>
      <a
        href={ctaSection.buttonLink}
        class="bg-naranja-vibrante text-white px-8 py-4 rounded-lg text-lg font-body font-bold hover:bg-orange-600 hover:scale-105 transition-all duration-300 inline-block"
      >
        {ctaSection.buttonText}
      </a>
    </div>
  </section>
</Layout>

<style>
  @keyframes fade-in-up {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes gradient {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  @keyframes float {
    0%, 100% {
      transform: translateY(0) rotate(0deg);
    }
    25% {
      transform: translateY(-10px) rotate(5deg);
    }
    50% {
      transform: translateY(-15px) rotate(-2deg);
    }
    75% {
      transform: translateY(-5px) rotate(3deg);
    }
  }

  @keyframes glow-pulse {
    0%, 100% {
      opacity: 0.1;
      transform: scale(1);
    }
    50% {
      opacity: 0.15;
      transform: scale(1.05);
    }
  }

  @keyframes flame {
    0%, 100% {
      opacity: 0.8;
      transform: scaleY(1) scaleX(1);
    }
    25% {
      opacity: 0.9;
      transform: scaleY(1.1) scaleX(0.95);
    }
    50% {
      opacity: 1;
      transform: scaleY(0.9) scaleX(1.05);
    }
    75% {
      opacity: 0.85;
      transform: scaleY(1.05) scaleX(0.98);
    }
  }

  @keyframes shake {
    0%, 100% { transform: translateX(0) scale(1); }
    10% { transform: translateX(-3px) scale(1.02); }
    20% { transform: translateX(3px) scale(1.02); }
    30% { transform: translateX(-2px) scale(1.01); }
    40% { transform: translateX(2px) scale(1.01); }
    50% { transform: translateX(-1px) scale(1); }
    60% { transform: translateX(1px) scale(1); }
  }

  @keyframes sparkle {
    0%, 100% {
      opacity: 0;
      transform: scale(0) rotate(0deg);
    }
    50% {
      opacity: 1;
      transform: scale(1) rotate(180deg);
    }
  }

  @keyframes arrow-bounce {
    0%, 100% {
      transform: translateY(0);
      opacity: 0.8;
    }
    50% {
      transform: translateY(8px);
      opacity: 1;
    }
  }

  .animate-fade-in-up {
    animation: fade-in-up 1s ease-out forwards;
    opacity: 0;
  }

  .animate-gradient {
    animation: gradient 3s ease infinite;
    background-size: 300% 300%;
  }

  .animate-float {
    animation: float 6s ease-in-out infinite;
  }

  .animate-glow-pulse {
    animation: glow-pulse 4s ease-in-out infinite;
  }

  .animate-flame {
    animation: flame 1s ease-in-out infinite;
  }

  .animate-shake {
    animation: shake 0.5s ease-in-out;
  }

  .animate-sparkle {
    animation: sparkle 0.6s ease-in-out;
  }

  .animate-arrow-bounce {
    animation: arrow-bounce 2s ease-in-out infinite;
  }

  .bg-300\% {
    background-size: 300% 300%;
  }

  /* Custom text glow for D.E.P */
  .text-glow-orange {
    text-shadow:
      0 0 5px rgba(255, 138, 76, 0.8),
      0 0 10px rgba(255, 138, 76, 0.6),
      0 0 20px rgba(255, 138, 76, 0.4),
      0 0 40px rgba(255, 138, 76, 0.2);
  }

</style>

<script is:inline>
  // Counter for candle clicks
  let candleClickCount = 0;

  // Wait for DOM to be ready
  document.addEventListener('DOMContentLoaded', function() {
    // Ensure the button is clickable
    const candleButton = document.getElementById('candleButton');
    if (candleButton) {
      candleButton.addEventListener('click', lightCandle);
    }
  });

  // Messages for each click
  const candleMessages = [
    "Gracias por honrar el recuerdo de Google.",
    "Su alma viaja m√°s all√° de los sat√©lites de SpaceX.",
    "¬øTanto quer√≠as a Google?",
    "Velas agotadas."
  ];

  function lightCandle() {
    const button = document.getElementById('candleButton');
    const candleEmoji = button.querySelector('.candle-emoji');
    const messageDiv = document.getElementById('candleMessage');
    const messageText = document.getElementById('messageText');

    // Add shake effect to button
    button.classList.add('animate-shake');

    // Add temporary glow effect to candle
    if (candleClickCount < 3) {
      candleEmoji.style.textShadow = '0 0 20px #ffd700, 0 0 30px #ffa500, 0 0 40px #ff6b35';
      candleEmoji.style.transform = 'scale(1.2)';

      // Remove glow effect after animation
      setTimeout(() => {
        candleEmoji.style.textShadow = '';
        candleEmoji.style.transform = '';
      }, 1000);
    }

    // Create sparkles effect
    createSparkles(button);

    // Get message based on click count
    const messageIndex = Math.min(candleClickCount, candleMessages.length - 1);
    messageText.textContent = candleMessages[messageIndex];

    // Show message with animation
    messageDiv.classList.remove('opacity-0', 'translate-y-4');
    messageDiv.classList.add('opacity-100', 'translate-y-0');

    // Hide message after 8 seconds or until user clicks again
    clearTimeout(window.messageTimeout);
    window.messageTimeout = setTimeout(() => {
      messageDiv.classList.add('opacity-0', 'translate-y-4');
      messageDiv.classList.remove('opacity-100', 'translate-y-0');
    }, 8000);

    // Remove shake effect
    setTimeout(() => {
      button.classList.remove('animate-shake');
    }, 500);

    candleClickCount++;
  }

  function createSparkles(element) {
    for (let i = 0; i < 8; i++) {
      const sparkle = document.createElement('div');
      sparkle.innerHTML = '‚ú®';
      sparkle.className = 'absolute text-xl pointer-events-none animate-sparkle';
      sparkle.style.left = Math.random() * 100 + '%';
      sparkle.style.top = Math.random() * 100 + '%';
      sparkle.style.zIndex = '9999';

      element.style.position = 'relative';
      element.appendChild(sparkle);

      setTimeout(() => {
        if (sparkle.parentNode) {
          sparkle.parentNode.removeChild(sparkle);
        }
      }, 600);
    }
  }

  // Intersection Observer para animaciones on scroll - SOLO HOMEPAGE
  (function() {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    }

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.remove('opacity-0', 'translate-y-8')
          entry.target.classList.add('opacity-100', 'translate-y-0')

          // Animar contadores de n√∫meros
          if (entry.target.querySelector('.counter')) {
            const counters = entry.target.querySelectorAll('.counter')
            counters.forEach(counter => {
              const target = parseInt(counter.getAttribute('data-target'))
              const suffix = counter.textContent.includes('%') ? '%' : '+'
              let count = 0
              const increment = target / 60

              const timer = setInterval(() => {
                count += increment
                if (count >= target) {
                  counter.textContent = target + suffix
                  clearInterval(timer)
                } else {
                  counter.textContent = Math.floor(count) + suffix
                }
              }, 30)
            })
          }

          observer.unobserve(entry.target)
        }
      })
    }, observerOptions)

    // Observar todos los elementos con la clase animate-on-scroll
    document.addEventListener('DOMContentLoaded', () => {
      const animatedElements = document.querySelectorAll('.animate-on-scroll')
      animatedElements.forEach(el => observer.observe(el))
    })
  })()
</script>
