//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  homepage: Homepage;
  homepageConnection: HomepageConnection;
  post: Post;
  postConnection: PostConnection;
  pages: Pages;
  pagesConnection: PagesConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHomepageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHomepageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HomepageFilter>;
};


export type QueryPostArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPostConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
};


export type QueryPagesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPagesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PagesFilter>;
};

export type DocumentFilter = {
  homepage?: InputMaybe<HomepageFilter>;
  post?: InputMaybe<PostFilter>;
  pages?: InputMaybe<PagesFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Homepage | Post | Pages | Folder;

export type HomepageHero = {
  __typename?: 'HomepageHero';
  subtitle: Scalars['String']['output'];
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  candleMessages: Array<Scalars['String']['output']>;
};

export type HomepageGoogleDeathSectionCheckboxItems = {
  __typename?: 'HomepageGoogleDeathSectionCheckboxItems';
  text: Scalars['String']['output'];
};

export type HomepageGoogleDeathSection = {
  __typename?: 'HomepageGoogleDeathSection';
  title: Scalars['String']['output'];
  paragraph: Scalars['String']['output'];
  checkboxItems?: Maybe<Array<Maybe<HomepageGoogleDeathSectionCheckboxItems>>>;
  closingPhrase: Scalars['String']['output'];
};

export type HomepagePainPointsSectionPhrases = {
  __typename?: 'HomepagePainPointsSectionPhrases';
  leftPart: Scalars['String']['output'];
  rightPart: Scalars['String']['output'];
};

export type HomepagePainPointsSection = {
  __typename?: 'HomepagePainPointsSection';
  title: Scalars['String']['output'];
  subtitleFirstPart: Scalars['String']['output'];
  phrases: Array<HomepagePainPointsSectionPhrases>;
  closingPhrase: Scalars['String']['output'];
};

export type HomepageTransitionMessageSection = {
  __typename?: 'HomepageTransitionMessageSection';
  mainText: Scalars['String']['output'];
  highlightedText: Scalars['String']['output'];
  continuationText: Scalars['String']['output'];
  secondaryText: Scalars['String']['output'];
};

export type HomepageBridgeSection = {
  __typename?: 'HomepageBridgeSection';
  title: Scalars['String']['output'];
  paragraph: Scalars['String']['output'];
};

export type HomepageServicesPackagesSectionPackages = {
  __typename?: 'HomepageServicesPackagesSectionPackages';
  icon: Scalars['String']['output'];
  heading: Scalars['String']['output'];
  description: Scalars['String']['output'];
  deliverables: Array<Scalars['String']['output']>;
  ctaText: Scalars['String']['output'];
  ctaLink: Scalars['String']['output'];
};

export type HomepageServicesPackagesSectionFinalCta = {
  __typename?: 'HomepageServicesPackagesSectionFinalCta';
  text: Scalars['String']['output'];
  linkText: Scalars['String']['output'];
  linkUrl: Scalars['String']['output'];
};

export type HomepageServicesPackagesSection = {
  __typename?: 'HomepageServicesPackagesSection';
  title: Scalars['String']['output'];
  packages?: Maybe<Array<Maybe<HomepageServicesPackagesSectionPackages>>>;
  finalCta?: Maybe<HomepageServicesPackagesSectionFinalCta>;
};

export type HomepageStatsSectionStats = {
  __typename?: 'HomepageStatsSectionStats';
  value: Scalars['Float']['output'];
  suffix: Scalars['String']['output'];
  description: Scalars['String']['output'];
};

export type HomepageStatsSection = {
  __typename?: 'HomepageStatsSection';
  title: Scalars['String']['output'];
  subtitle: Scalars['String']['output'];
  stats?: Maybe<Array<Maybe<HomepageStatsSectionStats>>>;
};

export type HomepageCtaSection = {
  __typename?: 'HomepageCtaSection';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  buttonText: Scalars['String']['output'];
  buttonLink: Scalars['String']['output'];
};

export type Homepage = Node & Document & {
  __typename?: 'Homepage';
  hero?: Maybe<HomepageHero>;
  googleDeathSection?: Maybe<HomepageGoogleDeathSection>;
  painPointsSection?: Maybe<HomepagePainPointsSection>;
  transitionMessageSection?: Maybe<HomepageTransitionMessageSection>;
  bridgeSection?: Maybe<HomepageBridgeSection>;
  servicesPackagesSection?: Maybe<HomepageServicesPackagesSection>;
  statsSection?: Maybe<HomepageStatsSection>;
  ctaSection?: Maybe<HomepageCtaSection>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type HomepageHeroFilter = {
  subtitle?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  candleMessages?: InputMaybe<StringFilter>;
};

export type HomepageGoogleDeathSectionCheckboxItemsFilter = {
  text?: InputMaybe<StringFilter>;
};

export type HomepageGoogleDeathSectionFilter = {
  title?: InputMaybe<StringFilter>;
  paragraph?: InputMaybe<StringFilter>;
  checkboxItems?: InputMaybe<HomepageGoogleDeathSectionCheckboxItemsFilter>;
  closingPhrase?: InputMaybe<StringFilter>;
};

export type HomepagePainPointsSectionPhrasesFilter = {
  leftPart?: InputMaybe<StringFilter>;
  rightPart?: InputMaybe<StringFilter>;
};

export type HomepagePainPointsSectionFilter = {
  title?: InputMaybe<StringFilter>;
  subtitleFirstPart?: InputMaybe<StringFilter>;
  phrases?: InputMaybe<HomepagePainPointsSectionPhrasesFilter>;
  closingPhrase?: InputMaybe<StringFilter>;
};

export type HomepageTransitionMessageSectionFilter = {
  mainText?: InputMaybe<StringFilter>;
  highlightedText?: InputMaybe<StringFilter>;
  continuationText?: InputMaybe<StringFilter>;
  secondaryText?: InputMaybe<StringFilter>;
};

export type HomepageBridgeSectionFilter = {
  title?: InputMaybe<StringFilter>;
  paragraph?: InputMaybe<StringFilter>;
};

export type HomepageServicesPackagesSectionPackagesFilter = {
  icon?: InputMaybe<StringFilter>;
  heading?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  deliverables?: InputMaybe<StringFilter>;
  ctaText?: InputMaybe<StringFilter>;
  ctaLink?: InputMaybe<StringFilter>;
};

export type HomepageServicesPackagesSectionFinalCtaFilter = {
  text?: InputMaybe<StringFilter>;
  linkText?: InputMaybe<StringFilter>;
  linkUrl?: InputMaybe<StringFilter>;
};

export type HomepageServicesPackagesSectionFilter = {
  title?: InputMaybe<StringFilter>;
  packages?: InputMaybe<HomepageServicesPackagesSectionPackagesFilter>;
  finalCta?: InputMaybe<HomepageServicesPackagesSectionFinalCtaFilter>;
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type HomepageStatsSectionStatsFilter = {
  value?: InputMaybe<NumberFilter>;
  suffix?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type HomepageStatsSectionFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  stats?: InputMaybe<HomepageStatsSectionStatsFilter>;
};

export type HomepageCtaSectionFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  buttonText?: InputMaybe<StringFilter>;
  buttonLink?: InputMaybe<StringFilter>;
};

export type HomepageFilter = {
  hero?: InputMaybe<HomepageHeroFilter>;
  googleDeathSection?: InputMaybe<HomepageGoogleDeathSectionFilter>;
  painPointsSection?: InputMaybe<HomepagePainPointsSectionFilter>;
  transitionMessageSection?: InputMaybe<HomepageTransitionMessageSectionFilter>;
  bridgeSection?: InputMaybe<HomepageBridgeSectionFilter>;
  servicesPackagesSection?: InputMaybe<HomepageServicesPackagesSectionFilter>;
  statsSection?: InputMaybe<HomepageStatsSectionFilter>;
  ctaSection?: InputMaybe<HomepageCtaSectionFilter>;
};

export type HomepageConnectionEdges = {
  __typename?: 'HomepageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Homepage>;
};

export type HomepageConnection = Connection & {
  __typename?: 'HomepageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<HomepageConnectionEdges>>>;
};

export type Post = Node & Document & {
  __typename?: 'Post';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  pubDate: Scalars['String']['output'];
  heroImage?: Maybe<Scalars['String']['output']>;
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  metaTitle?: Maybe<Scalars['String']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PostFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  pubDate?: InputMaybe<DatetimeFilter>;
  heroImage?: InputMaybe<ImageFilter>;
  tags?: InputMaybe<StringFilter>;
  metaTitle?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PostConnectionEdges = {
  __typename?: 'PostConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Post>;
};

export type PostConnection = Connection & {
  __typename?: 'PostConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PostConnectionEdges>>>;
};

export type PagesExperienceSectionItems = {
  __typename?: 'PagesExperienceSectionItems';
  icon?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
};

export type PagesExperienceSection = {
  __typename?: 'PagesExperienceSection';
  title?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  items?: Maybe<Array<Maybe<PagesExperienceSectionItems>>>;
};

export type PagesValuesSectionValues = {
  __typename?: 'PagesValuesSectionValues';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
};

export type PagesValuesSection = {
  __typename?: 'PagesValuesSection';
  title?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  values?: Maybe<Array<Maybe<PagesValuesSectionValues>>>;
};

export type PagesTestimonial = {
  __typename?: 'PagesTestimonial';
  quote?: Maybe<Scalars['String']['output']>;
  author?: Maybe<Scalars['String']['output']>;
  role?: Maybe<Scalars['String']['output']>;
};

export type PagesCtaSection = {
  __typename?: 'PagesCtaSection';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  buttonText?: Maybe<Scalars['String']['output']>;
};

export type Pages = Node & Document & {
  __typename?: 'Pages';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  introduction?: Maybe<Scalars['String']['output']>;
  profileImage?: Maybe<Scalars['String']['output']>;
  experienceSection?: Maybe<PagesExperienceSection>;
  valuesSection?: Maybe<PagesValuesSection>;
  testimonial?: Maybe<PagesTestimonial>;
  ctaSection?: Maybe<PagesCtaSection>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PagesExperienceSectionItemsFilter = {
  icon?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type PagesExperienceSectionFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  items?: InputMaybe<PagesExperienceSectionItemsFilter>;
};

export type PagesValuesSectionValuesFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type PagesValuesSectionFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  values?: InputMaybe<PagesValuesSectionValuesFilter>;
};

export type PagesTestimonialFilter = {
  quote?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  role?: InputMaybe<StringFilter>;
};

export type PagesCtaSectionFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  buttonText?: InputMaybe<StringFilter>;
};

export type PagesFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  introduction?: InputMaybe<StringFilter>;
  profileImage?: InputMaybe<ImageFilter>;
  experienceSection?: InputMaybe<PagesExperienceSectionFilter>;
  valuesSection?: InputMaybe<PagesValuesSectionFilter>;
  testimonial?: InputMaybe<PagesTestimonialFilter>;
  ctaSection?: InputMaybe<PagesCtaSectionFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PagesConnectionEdges = {
  __typename?: 'PagesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Pages>;
};

export type PagesConnection = Connection & {
  __typename?: 'PagesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PagesConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateHomepage: Homepage;
  createHomepage: Homepage;
  updatePost: Post;
  createPost: Post;
  updatePages: Pages;
  createPages: Pages;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateHomepageArgs = {
  relativePath: Scalars['String']['input'];
  params: HomepageMutation;
};


export type MutationCreateHomepageArgs = {
  relativePath: Scalars['String']['input'];
  params: HomepageMutation;
};


export type MutationUpdatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};


export type MutationCreatePostArgs = {
  relativePath: Scalars['String']['input'];
  params: PostMutation;
};


export type MutationUpdatePagesArgs = {
  relativePath: Scalars['String']['input'];
  params: PagesMutation;
};


export type MutationCreatePagesArgs = {
  relativePath: Scalars['String']['input'];
  params: PagesMutation;
};

export type DocumentUpdateMutation = {
  homepage?: InputMaybe<HomepageMutation>;
  post?: InputMaybe<PostMutation>;
  pages?: InputMaybe<PagesMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  homepage?: InputMaybe<HomepageMutation>;
  post?: InputMaybe<PostMutation>;
  pages?: InputMaybe<PagesMutation>;
};

export type HomepageHeroMutation = {
  subtitle?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  candleMessages?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type HomepageGoogleDeathSectionCheckboxItemsMutation = {
  text?: InputMaybe<Scalars['String']['input']>;
};

export type HomepageGoogleDeathSectionMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  paragraph?: InputMaybe<Scalars['String']['input']>;
  checkboxItems?: InputMaybe<Array<InputMaybe<HomepageGoogleDeathSectionCheckboxItemsMutation>>>;
  closingPhrase?: InputMaybe<Scalars['String']['input']>;
};

export type HomepagePainPointsSectionPhrasesMutation = {
  leftPart?: InputMaybe<Scalars['String']['input']>;
  rightPart?: InputMaybe<Scalars['String']['input']>;
};

export type HomepagePainPointsSectionMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitleFirstPart?: InputMaybe<Scalars['String']['input']>;
  phrases?: InputMaybe<Array<InputMaybe<HomepagePainPointsSectionPhrasesMutation>>>;
  closingPhrase?: InputMaybe<Scalars['String']['input']>;
};

export type HomepageTransitionMessageSectionMutation = {
  mainText?: InputMaybe<Scalars['String']['input']>;
  highlightedText?: InputMaybe<Scalars['String']['input']>;
  continuationText?: InputMaybe<Scalars['String']['input']>;
  secondaryText?: InputMaybe<Scalars['String']['input']>;
};

export type HomepageBridgeSectionMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  paragraph?: InputMaybe<Scalars['String']['input']>;
};

export type HomepageServicesPackagesSectionPackagesMutation = {
  icon?: InputMaybe<Scalars['String']['input']>;
  heading?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  deliverables?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  ctaText?: InputMaybe<Scalars['String']['input']>;
  ctaLink?: InputMaybe<Scalars['String']['input']>;
};

export type HomepageServicesPackagesSectionFinalCtaMutation = {
  text?: InputMaybe<Scalars['String']['input']>;
  linkText?: InputMaybe<Scalars['String']['input']>;
  linkUrl?: InputMaybe<Scalars['String']['input']>;
};

export type HomepageServicesPackagesSectionMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  packages?: InputMaybe<Array<InputMaybe<HomepageServicesPackagesSectionPackagesMutation>>>;
  finalCta?: InputMaybe<HomepageServicesPackagesSectionFinalCtaMutation>;
};

export type HomepageStatsSectionStatsMutation = {
  value?: InputMaybe<Scalars['Float']['input']>;
  suffix?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type HomepageStatsSectionMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  stats?: InputMaybe<Array<InputMaybe<HomepageStatsSectionStatsMutation>>>;
};

export type HomepageCtaSectionMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  buttonText?: InputMaybe<Scalars['String']['input']>;
  buttonLink?: InputMaybe<Scalars['String']['input']>;
};

export type HomepageMutation = {
  hero?: InputMaybe<HomepageHeroMutation>;
  googleDeathSection?: InputMaybe<HomepageGoogleDeathSectionMutation>;
  painPointsSection?: InputMaybe<HomepagePainPointsSectionMutation>;
  transitionMessageSection?: InputMaybe<HomepageTransitionMessageSectionMutation>;
  bridgeSection?: InputMaybe<HomepageBridgeSectionMutation>;
  servicesPackagesSection?: InputMaybe<HomepageServicesPackagesSectionMutation>;
  statsSection?: InputMaybe<HomepageStatsSectionMutation>;
  ctaSection?: InputMaybe<HomepageCtaSectionMutation>;
};

export type PostMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  pubDate?: InputMaybe<Scalars['String']['input']>;
  heroImage?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  metaTitle?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type PagesExperienceSectionItemsMutation = {
  icon?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type PagesExperienceSectionMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  items?: InputMaybe<Array<InputMaybe<PagesExperienceSectionItemsMutation>>>;
};

export type PagesValuesSectionValuesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type PagesValuesSectionMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  values?: InputMaybe<Array<InputMaybe<PagesValuesSectionValuesMutation>>>;
};

export type PagesTestimonialMutation = {
  quote?: InputMaybe<Scalars['String']['input']>;
  author?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Scalars['String']['input']>;
};

export type PagesCtaSectionMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  buttonText?: InputMaybe<Scalars['String']['input']>;
};

export type PagesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  introduction?: InputMaybe<Scalars['String']['input']>;
  profileImage?: InputMaybe<Scalars['String']['input']>;
  experienceSection?: InputMaybe<PagesExperienceSectionMutation>;
  valuesSection?: InputMaybe<PagesValuesSectionMutation>;
  testimonial?: InputMaybe<PagesTestimonialMutation>;
  ctaSection?: InputMaybe<PagesCtaSectionMutation>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type HomepagePartsFragment = { __typename: 'Homepage', hero?: { __typename: 'HomepageHero', subtitle: string, title: string, description: string, candleMessages: Array<string> } | null, googleDeathSection?: { __typename: 'HomepageGoogleDeathSection', title: string, paragraph: string, closingPhrase: string, checkboxItems?: Array<{ __typename: 'HomepageGoogleDeathSectionCheckboxItems', text: string } | null> | null } | null, painPointsSection?: { __typename: 'HomepagePainPointsSection', title: string, subtitleFirstPart: string, closingPhrase: string, phrases: Array<{ __typename: 'HomepagePainPointsSectionPhrases', leftPart: string, rightPart: string }> } | null, transitionMessageSection?: { __typename: 'HomepageTransitionMessageSection', mainText: string, highlightedText: string, continuationText: string, secondaryText: string } | null, bridgeSection?: { __typename: 'HomepageBridgeSection', title: string, paragraph: string } | null, servicesPackagesSection?: { __typename: 'HomepageServicesPackagesSection', title: string, packages?: Array<{ __typename: 'HomepageServicesPackagesSectionPackages', icon: string, heading: string, description: string, deliverables: Array<string>, ctaText: string, ctaLink: string } | null> | null, finalCta?: { __typename: 'HomepageServicesPackagesSectionFinalCta', text: string, linkText: string, linkUrl: string } | null } | null, statsSection?: { __typename: 'HomepageStatsSection', title: string, subtitle: string, stats?: Array<{ __typename: 'HomepageStatsSectionStats', value: number, suffix: string, description: string } | null> | null } | null, ctaSection?: { __typename: 'HomepageCtaSection', title: string, description: string, buttonText: string, buttonLink: string } | null };

export type PostPartsFragment = { __typename: 'Post', title: string, description: string, pubDate: string, heroImage?: string | null, tags?: Array<string | null> | null, metaTitle?: string | null, body?: any | null };

export type PagesPartsFragment = { __typename: 'Pages', title: string, description?: string | null, subtitle?: string | null, introduction?: string | null, profileImage?: string | null, body?: any | null, experienceSection?: { __typename: 'PagesExperienceSection', title?: string | null, subtitle?: string | null, items?: Array<{ __typename: 'PagesExperienceSectionItems', icon?: string | null, title?: string | null, description?: string | null } | null> | null } | null, valuesSection?: { __typename: 'PagesValuesSection', title?: string | null, subtitle?: string | null, values?: Array<{ __typename: 'PagesValuesSectionValues', title?: string | null, description?: string | null } | null> | null } | null, testimonial?: { __typename: 'PagesTestimonial', quote?: string | null, author?: string | null, role?: string | null } | null, ctaSection?: { __typename: 'PagesCtaSection', title?: string | null, description?: string | null, buttonText?: string | null } | null };

export type HomepageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type HomepageQuery = { __typename?: 'Query', homepage: { __typename: 'Homepage', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hero?: { __typename: 'HomepageHero', subtitle: string, title: string, description: string, candleMessages: Array<string> } | null, googleDeathSection?: { __typename: 'HomepageGoogleDeathSection', title: string, paragraph: string, closingPhrase: string, checkboxItems?: Array<{ __typename: 'HomepageGoogleDeathSectionCheckboxItems', text: string } | null> | null } | null, painPointsSection?: { __typename: 'HomepagePainPointsSection', title: string, subtitleFirstPart: string, closingPhrase: string, phrases: Array<{ __typename: 'HomepagePainPointsSectionPhrases', leftPart: string, rightPart: string }> } | null, transitionMessageSection?: { __typename: 'HomepageTransitionMessageSection', mainText: string, highlightedText: string, continuationText: string, secondaryText: string } | null, bridgeSection?: { __typename: 'HomepageBridgeSection', title: string, paragraph: string } | null, servicesPackagesSection?: { __typename: 'HomepageServicesPackagesSection', title: string, packages?: Array<{ __typename: 'HomepageServicesPackagesSectionPackages', icon: string, heading: string, description: string, deliverables: Array<string>, ctaText: string, ctaLink: string } | null> | null, finalCta?: { __typename: 'HomepageServicesPackagesSectionFinalCta', text: string, linkText: string, linkUrl: string } | null } | null, statsSection?: { __typename: 'HomepageStatsSection', title: string, subtitle: string, stats?: Array<{ __typename: 'HomepageStatsSectionStats', value: number, suffix: string, description: string } | null> | null } | null, ctaSection?: { __typename: 'HomepageCtaSection', title: string, description: string, buttonText: string, buttonLink: string } | null } };

export type HomepageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HomepageFilter>;
}>;


export type HomepageConnectionQuery = { __typename?: 'Query', homepageConnection: { __typename?: 'HomepageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'HomepageConnectionEdges', cursor: string, node?: { __typename: 'Homepage', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hero?: { __typename: 'HomepageHero', subtitle: string, title: string, description: string, candleMessages: Array<string> } | null, googleDeathSection?: { __typename: 'HomepageGoogleDeathSection', title: string, paragraph: string, closingPhrase: string, checkboxItems?: Array<{ __typename: 'HomepageGoogleDeathSectionCheckboxItems', text: string } | null> | null } | null, painPointsSection?: { __typename: 'HomepagePainPointsSection', title: string, subtitleFirstPart: string, closingPhrase: string, phrases: Array<{ __typename: 'HomepagePainPointsSectionPhrases', leftPart: string, rightPart: string }> } | null, transitionMessageSection?: { __typename: 'HomepageTransitionMessageSection', mainText: string, highlightedText: string, continuationText: string, secondaryText: string } | null, bridgeSection?: { __typename: 'HomepageBridgeSection', title: string, paragraph: string } | null, servicesPackagesSection?: { __typename: 'HomepageServicesPackagesSection', title: string, packages?: Array<{ __typename: 'HomepageServicesPackagesSectionPackages', icon: string, heading: string, description: string, deliverables: Array<string>, ctaText: string, ctaLink: string } | null> | null, finalCta?: { __typename: 'HomepageServicesPackagesSectionFinalCta', text: string, linkText: string, linkUrl: string } | null } | null, statsSection?: { __typename: 'HomepageStatsSection', title: string, subtitle: string, stats?: Array<{ __typename: 'HomepageStatsSectionStats', value: number, suffix: string, description: string } | null> | null } | null, ctaSection?: { __typename: 'HomepageCtaSection', title: string, description: string, buttonText: string, buttonLink: string } | null } | null } | null> | null } };

export type PostQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PostQuery = { __typename?: 'Query', post: { __typename: 'Post', id: string, title: string, description: string, pubDate: string, heroImage?: string | null, tags?: Array<string | null> | null, metaTitle?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PostConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PostFilter>;
}>;


export type PostConnectionQuery = { __typename?: 'Query', postConnection: { __typename?: 'PostConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PostConnectionEdges', cursor: string, node?: { __typename: 'Post', id: string, title: string, description: string, pubDate: string, heroImage?: string | null, tags?: Array<string | null> | null, metaTitle?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type PagesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PagesQuery = { __typename?: 'Query', pages: { __typename: 'Pages', id: string, title: string, description?: string | null, subtitle?: string | null, introduction?: string | null, profileImage?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, experienceSection?: { __typename: 'PagesExperienceSection', title?: string | null, subtitle?: string | null, items?: Array<{ __typename: 'PagesExperienceSectionItems', icon?: string | null, title?: string | null, description?: string | null } | null> | null } | null, valuesSection?: { __typename: 'PagesValuesSection', title?: string | null, subtitle?: string | null, values?: Array<{ __typename: 'PagesValuesSectionValues', title?: string | null, description?: string | null } | null> | null } | null, testimonial?: { __typename: 'PagesTestimonial', quote?: string | null, author?: string | null, role?: string | null } | null, ctaSection?: { __typename: 'PagesCtaSection', title?: string | null, description?: string | null, buttonText?: string | null } | null } };

export type PagesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PagesFilter>;
}>;


export type PagesConnectionQuery = { __typename?: 'Query', pagesConnection: { __typename?: 'PagesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PagesConnectionEdges', cursor: string, node?: { __typename: 'Pages', id: string, title: string, description?: string | null, subtitle?: string | null, introduction?: string | null, profileImage?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, experienceSection?: { __typename: 'PagesExperienceSection', title?: string | null, subtitle?: string | null, items?: Array<{ __typename: 'PagesExperienceSectionItems', icon?: string | null, title?: string | null, description?: string | null } | null> | null } | null, valuesSection?: { __typename: 'PagesValuesSection', title?: string | null, subtitle?: string | null, values?: Array<{ __typename: 'PagesValuesSectionValues', title?: string | null, description?: string | null } | null> | null } | null, testimonial?: { __typename: 'PagesTestimonial', quote?: string | null, author?: string | null, role?: string | null } | null, ctaSection?: { __typename: 'PagesCtaSection', title?: string | null, description?: string | null, buttonText?: string | null } | null } | null } | null> | null } };

export const HomepagePartsFragmentDoc = gql`
    fragment HomepageParts on Homepage {
  __typename
  hero {
    __typename
    subtitle
    title
    description
    candleMessages
  }
  googleDeathSection {
    __typename
    title
    paragraph
    checkboxItems {
      __typename
      text
    }
    closingPhrase
  }
  painPointsSection {
    __typename
    title
    subtitleFirstPart
    phrases {
      __typename
      leftPart
      rightPart
    }
    closingPhrase
  }
  transitionMessageSection {
    __typename
    mainText
    highlightedText
    continuationText
    secondaryText
  }
  bridgeSection {
    __typename
    title
    paragraph
  }
  servicesPackagesSection {
    __typename
    title
    packages {
      __typename
      icon
      heading
      description
      deliverables
      ctaText
      ctaLink
    }
    finalCta {
      __typename
      text
      linkText
      linkUrl
    }
  }
  statsSection {
    __typename
    title
    subtitle
    stats {
      __typename
      value
      suffix
      description
    }
  }
  ctaSection {
    __typename
    title
    description
    buttonText
    buttonLink
  }
}
    `;
export const PostPartsFragmentDoc = gql`
    fragment PostParts on Post {
  __typename
  title
  description
  pubDate
  heroImage
  tags
  metaTitle
  body
}
    `;
export const PagesPartsFragmentDoc = gql`
    fragment PagesParts on Pages {
  __typename
  title
  description
  subtitle
  introduction
  profileImage
  experienceSection {
    __typename
    title
    subtitle
    items {
      __typename
      icon
      title
      description
    }
  }
  valuesSection {
    __typename
    title
    subtitle
    values {
      __typename
      title
      description
    }
  }
  testimonial {
    __typename
    quote
    author
    role
  }
  ctaSection {
    __typename
    title
    description
    buttonText
  }
  body
}
    `;
export const HomepageDocument = gql`
    query homepage($relativePath: String!) {
  homepage(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...HomepageParts
  }
}
    ${HomepagePartsFragmentDoc}`;
export const HomepageConnectionDocument = gql`
    query homepageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: HomepageFilter) {
  homepageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...HomepageParts
      }
    }
  }
}
    ${HomepagePartsFragmentDoc}`;
export const PostDocument = gql`
    query post($relativePath: String!) {
  post(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PostParts
  }
}
    ${PostPartsFragmentDoc}`;
export const PostConnectionDocument = gql`
    query postConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PostFilter) {
  postConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PostParts
      }
    }
  }
}
    ${PostPartsFragmentDoc}`;
export const PagesDocument = gql`
    query pages($relativePath: String!) {
  pages(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PagesParts
  }
}
    ${PagesPartsFragmentDoc}`;
export const PagesConnectionDocument = gql`
    query pagesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PagesFilter) {
  pagesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PagesParts
      }
    }
  }
}
    ${PagesPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      homepage(variables: HomepageQueryVariables, options?: C): Promise<{data: HomepageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomepageQueryVariables, query: string}> {
        return requester<{data: HomepageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomepageQueryVariables, query: string}, HomepageQueryVariables>(HomepageDocument, variables, options);
      },
    homepageConnection(variables?: HomepageConnectionQueryVariables, options?: C): Promise<{data: HomepageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomepageConnectionQueryVariables, query: string}> {
        return requester<{data: HomepageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomepageConnectionQueryVariables, query: string}, HomepageConnectionQueryVariables>(HomepageConnectionDocument, variables, options);
      },
    post(variables: PostQueryVariables, options?: C): Promise<{data: PostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostQueryVariables, query: string}> {
        return requester<{data: PostQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostQueryVariables, query: string}, PostQueryVariables>(PostDocument, variables, options);
      },
    postConnection(variables?: PostConnectionQueryVariables, options?: C): Promise<{data: PostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostConnectionQueryVariables, query: string}> {
        return requester<{data: PostConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PostConnectionQueryVariables, query: string}, PostConnectionQueryVariables>(PostConnectionDocument, variables, options);
      },
    pages(variables: PagesQueryVariables, options?: C): Promise<{data: PagesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PagesQueryVariables, query: string}> {
        return requester<{data: PagesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PagesQueryVariables, query: string}, PagesQueryVariables>(PagesDocument, variables, options);
      },
    pagesConnection(variables?: PagesConnectionQueryVariables, options?: C): Promise<{data: PagesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PagesConnectionQueryVariables, query: string}> {
        return requester<{data: PagesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PagesConnectionQueryVariables, query: string}, PagesConnectionQueryVariables>(PagesConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  