# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  homepage(relativePath: String): Homepage!
  homepageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HomepageFilter): HomepageConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  pages(relativePath: String): Pages!
  pagesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PagesFilter): PagesConnection!
}

input DocumentFilter {
  homepage: HomepageFilter
  post: PostFilter
  pages: PagesFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Homepage | Post | Pages | Folder

type HomepageHero {
  subtitle: String!
  title: String!
  description: String!
  candleMessages: [String!]!
}

type HomepageGoogleDeathSectionCheckboxItems {
  text: String!
}

type HomepageGoogleDeathSection {
  title: String!
  paragraph: String!
  checkboxItems: [HomepageGoogleDeathSectionCheckboxItems]
  closingPhrase: String!
}

type HomepagePainPointsSectionPhrases {
  leftPart: String!
  rightPart: String!
}

type HomepagePainPointsSection {
  title: String!
  subtitleFirstPart: String!
  phrases: [HomepagePainPointsSectionPhrases!]!
  closingPhrase: String!
}

type HomepageTransitionMessageSection {
  mainText: String!
  highlightedText: String!
  continuationText: String!
  secondaryText: String!
}

type HomepageBridgeSection {
  title: String!
  paragraph: String!
}

type HomepageServicesPackagesSectionPackages {
  icon: String!
  heading: String!
  description: String!
  deliverables: [String!]!
  ctaText: String!
  ctaLink: String!
}

type HomepageServicesPackagesSectionFinalCta {
  text: String!
  linkText: String!
  linkUrl: String!
}

type HomepageServicesPackagesSection {
  title: String!
  packages: [HomepageServicesPackagesSectionPackages]
  finalCta: HomepageServicesPackagesSectionFinalCta
}

type HomepageStatsSectionStats {
  value: Float!
  suffix: String!
  description: String!
}

type HomepageStatsSection {
  title: String!
  subtitle: String!
  stats: [HomepageStatsSectionStats]
}

type HomepageCtaSection {
  title: String!
  description: String!
  buttonText: String!
  buttonLink: String!
}

type Homepage implements Node & Document {
  hero: HomepageHero
  googleDeathSection: HomepageGoogleDeathSection
  painPointsSection: HomepagePainPointsSection
  transitionMessageSection: HomepageTransitionMessageSection
  bridgeSection: HomepageBridgeSection
  servicesPackagesSection: HomepageServicesPackagesSection
  statsSection: HomepageStatsSection
  ctaSection: HomepageCtaSection
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input HomepageHeroFilter {
  subtitle: StringFilter
  title: StringFilter
  description: StringFilter
  candleMessages: StringFilter
}

input HomepageGoogleDeathSectionCheckboxItemsFilter {
  text: StringFilter
}

input HomepageGoogleDeathSectionFilter {
  title: StringFilter
  paragraph: StringFilter
  checkboxItems: HomepageGoogleDeathSectionCheckboxItemsFilter
  closingPhrase: StringFilter
}

input HomepagePainPointsSectionPhrasesFilter {
  leftPart: StringFilter
  rightPart: StringFilter
}

input HomepagePainPointsSectionFilter {
  title: StringFilter
  subtitleFirstPart: StringFilter
  phrases: HomepagePainPointsSectionPhrasesFilter
  closingPhrase: StringFilter
}

input HomepageTransitionMessageSectionFilter {
  mainText: StringFilter
  highlightedText: StringFilter
  continuationText: StringFilter
  secondaryText: StringFilter
}

input HomepageBridgeSectionFilter {
  title: StringFilter
  paragraph: StringFilter
}

input HomepageServicesPackagesSectionPackagesFilter {
  icon: StringFilter
  heading: StringFilter
  description: StringFilter
  deliverables: StringFilter
  ctaText: StringFilter
  ctaLink: StringFilter
}

input HomepageServicesPackagesSectionFinalCtaFilter {
  text: StringFilter
  linkText: StringFilter
  linkUrl: StringFilter
}

input HomepageServicesPackagesSectionFilter {
  title: StringFilter
  packages: HomepageServicesPackagesSectionPackagesFilter
  finalCta: HomepageServicesPackagesSectionFinalCtaFilter
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input HomepageStatsSectionStatsFilter {
  value: NumberFilter
  suffix: StringFilter
  description: StringFilter
}

input HomepageStatsSectionFilter {
  title: StringFilter
  subtitle: StringFilter
  stats: HomepageStatsSectionStatsFilter
}

input HomepageCtaSectionFilter {
  title: StringFilter
  description: StringFilter
  buttonText: StringFilter
  buttonLink: StringFilter
}

input HomepageFilter {
  hero: HomepageHeroFilter
  googleDeathSection: HomepageGoogleDeathSectionFilter
  painPointsSection: HomepagePainPointsSectionFilter
  transitionMessageSection: HomepageTransitionMessageSectionFilter
  bridgeSection: HomepageBridgeSectionFilter
  servicesPackagesSection: HomepageServicesPackagesSectionFilter
  statsSection: HomepageStatsSectionFilter
  ctaSection: HomepageCtaSectionFilter
}

type HomepageConnectionEdges {
  cursor: String!
  node: Homepage
}

type HomepageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HomepageConnectionEdges]
}

type Post implements Node & Document {
  title: String!
  description: String!
  pubDate: String!
  heroImage: String
  tags: [String]
  metaTitle: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PostFilter {
  title: StringFilter
  description: StringFilter
  pubDate: DatetimeFilter
  heroImage: ImageFilter
  tags: StringFilter
  metaTitle: StringFilter
  body: RichTextFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type PagesExperienceSectionItems {
  icon: String
  title: String
  description: String
}

type PagesExperienceSection {
  title: String
  subtitle: String
  items: [PagesExperienceSectionItems]
}

type PagesValuesSectionValues {
  title: String
  description: String
}

type PagesValuesSection {
  title: String
  subtitle: String
  values: [PagesValuesSectionValues]
}

type PagesTestimonial {
  quote: String
  author: String
  role: String
}

type PagesCtaSection {
  title: String
  description: String
  buttonText: String
}

type Pages implements Node & Document {
  title: String!
  description: String
  subtitle: String
  introduction: String
  profileImage: String
  experienceSection: PagesExperienceSection
  valuesSection: PagesValuesSection
  testimonial: PagesTestimonial
  ctaSection: PagesCtaSection
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PagesExperienceSectionItemsFilter {
  icon: StringFilter
  title: StringFilter
  description: StringFilter
}

input PagesExperienceSectionFilter {
  title: StringFilter
  subtitle: StringFilter
  items: PagesExperienceSectionItemsFilter
}

input PagesValuesSectionValuesFilter {
  title: StringFilter
  description: StringFilter
}

input PagesValuesSectionFilter {
  title: StringFilter
  subtitle: StringFilter
  values: PagesValuesSectionValuesFilter
}

input PagesTestimonialFilter {
  quote: StringFilter
  author: StringFilter
  role: StringFilter
}

input PagesCtaSectionFilter {
  title: StringFilter
  description: StringFilter
  buttonText: StringFilter
}

input PagesFilter {
  title: StringFilter
  description: StringFilter
  subtitle: StringFilter
  introduction: StringFilter
  profileImage: ImageFilter
  experienceSection: PagesExperienceSectionFilter
  valuesSection: PagesValuesSectionFilter
  testimonial: PagesTestimonialFilter
  ctaSection: PagesCtaSectionFilter
  body: RichTextFilter
}

type PagesConnectionEdges {
  cursor: String!
  node: Pages
}

type PagesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PagesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateHomepage(relativePath: String!, params: HomepageMutation!): Homepage!
  createHomepage(relativePath: String!, params: HomepageMutation!): Homepage!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updatePages(relativePath: String!, params: PagesMutation!): Pages!
  createPages(relativePath: String!, params: PagesMutation!): Pages!
}

input DocumentUpdateMutation {
  homepage: HomepageMutation
  post: PostMutation
  pages: PagesMutation
  relativePath: String
}

input DocumentMutation {
  homepage: HomepageMutation
  post: PostMutation
  pages: PagesMutation
}

input HomepageHeroMutation {
  subtitle: String
  title: String
  description: String
  candleMessages: [String]
}

input HomepageGoogleDeathSectionCheckboxItemsMutation {
  text: String
}

input HomepageGoogleDeathSectionMutation {
  title: String
  paragraph: String
  checkboxItems: [HomepageGoogleDeathSectionCheckboxItemsMutation]
  closingPhrase: String
}

input HomepagePainPointsSectionPhrasesMutation {
  leftPart: String
  rightPart: String
}

input HomepagePainPointsSectionMutation {
  title: String
  subtitleFirstPart: String
  phrases: [HomepagePainPointsSectionPhrasesMutation]
  closingPhrase: String
}

input HomepageTransitionMessageSectionMutation {
  mainText: String
  highlightedText: String
  continuationText: String
  secondaryText: String
}

input HomepageBridgeSectionMutation {
  title: String
  paragraph: String
}

input HomepageServicesPackagesSectionPackagesMutation {
  icon: String
  heading: String
  description: String
  deliverables: [String]
  ctaText: String
  ctaLink: String
}

input HomepageServicesPackagesSectionFinalCtaMutation {
  text: String
  linkText: String
  linkUrl: String
}

input HomepageServicesPackagesSectionMutation {
  title: String
  packages: [HomepageServicesPackagesSectionPackagesMutation]
  finalCta: HomepageServicesPackagesSectionFinalCtaMutation
}

input HomepageStatsSectionStatsMutation {
  value: Float
  suffix: String
  description: String
}

input HomepageStatsSectionMutation {
  title: String
  subtitle: String
  stats: [HomepageStatsSectionStatsMutation]
}

input HomepageCtaSectionMutation {
  title: String
  description: String
  buttonText: String
  buttonLink: String
}

input HomepageMutation {
  hero: HomepageHeroMutation
  googleDeathSection: HomepageGoogleDeathSectionMutation
  painPointsSection: HomepagePainPointsSectionMutation
  transitionMessageSection: HomepageTransitionMessageSectionMutation
  bridgeSection: HomepageBridgeSectionMutation
  servicesPackagesSection: HomepageServicesPackagesSectionMutation
  statsSection: HomepageStatsSectionMutation
  ctaSection: HomepageCtaSectionMutation
}

input PostMutation {
  title: String
  description: String
  pubDate: String
  heroImage: String
  tags: [String]
  metaTitle: String
  body: JSON
}

input PagesExperienceSectionItemsMutation {
  icon: String
  title: String
  description: String
}

input PagesExperienceSectionMutation {
  title: String
  subtitle: String
  items: [PagesExperienceSectionItemsMutation]
}

input PagesValuesSectionValuesMutation {
  title: String
  description: String
}

input PagesValuesSectionMutation {
  title: String
  subtitle: String
  values: [PagesValuesSectionValuesMutation]
}

input PagesTestimonialMutation {
  quote: String
  author: String
  role: String
}

input PagesCtaSectionMutation {
  title: String
  description: String
  buttonText: String
}

input PagesMutation {
  title: String
  description: String
  subtitle: String
  introduction: String
  profileImage: String
  experienceSection: PagesExperienceSectionMutation
  valuesSection: PagesValuesSectionMutation
  testimonial: PagesTestimonialMutation
  ctaSection: PagesCtaSectionMutation
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
